// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2eproto Γ
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct Γ TableStruct_messages_2eproto {
  static const uint32_t offsets[];
};
Γ extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2eproto;
namespace Jde {
namespace Logging {
namespace Proto {
class Acknowledgement;
struct AcknowledgementDefaultTypeInternal;
Γ extern AcknowledgementDefaultTypeInternal _Acknowledgement_default_instance_;
class CustomComplete;
struct CustomCompleteDefaultTypeInternal;
Γ extern CustomCompleteDefaultTypeInternal _CustomComplete_default_instance_;
class CustomMessage;
struct CustomMessageDefaultTypeInternal;
Γ extern CustomMessageDefaultTypeInternal _CustomMessage_default_instance_;
class FromServer;
struct FromServerDefaultTypeInternal;
Γ extern FromServerDefaultTypeInternal _FromServer_default_instance_;
class FromServerUnion;
struct FromServerUnionDefaultTypeInternal;
Γ extern FromServerUnionDefaultTypeInternal _FromServerUnion_default_instance_;
class GenericFromServer;
struct GenericFromServerDefaultTypeInternal;
Γ extern GenericFromServerDefaultTypeInternal _GenericFromServer_default_instance_;
class Instance;
struct InstanceDefaultTypeInternal;
Γ extern InstanceDefaultTypeInternal _Instance_default_instance_;
class LogLevels;
struct LogLevelsDefaultTypeInternal;
Γ extern LogLevelsDefaultTypeInternal _LogLevels_default_instance_;
class Message;
struct MessageDefaultTypeInternal;
Γ extern MessageDefaultTypeInternal _Message_default_instance_;
class Progress;
struct ProgressDefaultTypeInternal;
Γ extern ProgressDefaultTypeInternal _Progress_default_instance_;
class RequestSessionInfo;
struct RequestSessionInfoDefaultTypeInternal;
Γ extern RequestSessionInfoDefaultTypeInternal _RequestSessionInfo_default_instance_;
class RequestString;
struct RequestStringDefaultTypeInternal;
Γ extern RequestStringDefaultTypeInternal _RequestString_default_instance_;
class SessionInfo;
struct SessionInfoDefaultTypeInternal;
Γ extern SessionInfoDefaultTypeInternal _SessionInfo_default_instance_;
class Status;
struct StatusDefaultTypeInternal;
Γ extern StatusDefaultTypeInternal _Status_default_instance_;
class Strings;
struct StringsDefaultTypeInternal;
Γ extern StringsDefaultTypeInternal _Strings_default_instance_;
class ToServer;
struct ToServerDefaultTypeInternal;
Γ extern ToServerDefaultTypeInternal _ToServer_default_instance_;
class ToServerUnion;
struct ToServerUnionDefaultTypeInternal;
Γ extern ToServerUnionDefaultTypeInternal _ToServerUnion_default_instance_;
}  // namespace Proto
}  // namespace Logging
}  // namespace Jde
PROTOBUF_NAMESPACE_OPEN
template<> Γ ::Jde::Logging::Proto::Acknowledgement* Arena::CreateMaybeMessage<::Jde::Logging::Proto::Acknowledgement>(Arena*);
template<> Γ ::Jde::Logging::Proto::CustomComplete* Arena::CreateMaybeMessage<::Jde::Logging::Proto::CustomComplete>(Arena*);
template<> Γ ::Jde::Logging::Proto::CustomMessage* Arena::CreateMaybeMessage<::Jde::Logging::Proto::CustomMessage>(Arena*);
template<> Γ ::Jde::Logging::Proto::FromServer* Arena::CreateMaybeMessage<::Jde::Logging::Proto::FromServer>(Arena*);
template<> Γ ::Jde::Logging::Proto::FromServerUnion* Arena::CreateMaybeMessage<::Jde::Logging::Proto::FromServerUnion>(Arena*);
template<> Γ ::Jde::Logging::Proto::GenericFromServer* Arena::CreateMaybeMessage<::Jde::Logging::Proto::GenericFromServer>(Arena*);
template<> Γ ::Jde::Logging::Proto::Instance* Arena::CreateMaybeMessage<::Jde::Logging::Proto::Instance>(Arena*);
template<> Γ ::Jde::Logging::Proto::LogLevels* Arena::CreateMaybeMessage<::Jde::Logging::Proto::LogLevels>(Arena*);
template<> Γ ::Jde::Logging::Proto::Message* Arena::CreateMaybeMessage<::Jde::Logging::Proto::Message>(Arena*);
template<> Γ ::Jde::Logging::Proto::Progress* Arena::CreateMaybeMessage<::Jde::Logging::Proto::Progress>(Arena*);
template<> Γ ::Jde::Logging::Proto::RequestSessionInfo* Arena::CreateMaybeMessage<::Jde::Logging::Proto::RequestSessionInfo>(Arena*);
template<> Γ ::Jde::Logging::Proto::RequestString* Arena::CreateMaybeMessage<::Jde::Logging::Proto::RequestString>(Arena*);
template<> Γ ::Jde::Logging::Proto::SessionInfo* Arena::CreateMaybeMessage<::Jde::Logging::Proto::SessionInfo>(Arena*);
template<> Γ ::Jde::Logging::Proto::Status* Arena::CreateMaybeMessage<::Jde::Logging::Proto::Status>(Arena*);
template<> Γ ::Jde::Logging::Proto::Strings* Arena::CreateMaybeMessage<::Jde::Logging::Proto::Strings>(Arena*);
template<> Γ ::Jde::Logging::Proto::ToServer* Arena::CreateMaybeMessage<::Jde::Logging::Proto::ToServer>(Arena*);
template<> Γ ::Jde::Logging::Proto::ToServerUnion* Arena::CreateMaybeMessage<::Jde::Logging::Proto::ToServerUnion>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Jde {
namespace Logging {
namespace Proto {

enum ELogLevel : int {
  Trace = 0,
  Debug = 1,
  Information = 2,
  Warning = 3,
  Error = 4,
  Critical = 5,
  LogLevelNone = 6,
  NoLog = -1,
  ELogLevel_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ELogLevel_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
Γ bool ELogLevel_IsValid(int value);
constexpr ELogLevel ELogLevel_MIN = NoLog;
constexpr ELogLevel ELogLevel_MAX = LogLevelNone;
constexpr int ELogLevel_ARRAYSIZE = ELogLevel_MAX + 1;

Γ const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ELogLevel_descriptor();
template<typename T>
inline const std::string& ELogLevel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ELogLevel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ELogLevel_Name.");
  return ELogLevel_Name(static_cast<ELogLevel>(enum_t_value));
}
template<>
inline const std::string& ELogLevel_Name(ELogLevel value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum
    <ELogLevel_descriptor, -1, 6>(static_cast<int>(value));
}
inline bool ELogLevel_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ELogLevel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ELogLevel>(
    ELogLevel_descriptor(), name, value);
}
enum EFields : int {
  FieldsNone = 0,
  TimestampField = 1,
  MessageId = 2,
  MessageField = 4,
  Level = 8,
  FileId = 16,
  File = 32,
  FunctionId = 64,
  Function = 128,
  LineNumber = 256,
  UserId = 512,
  User = 1024,
  ThreadId = 2048,
  Thread = 4096,
  VariableCount = 8192,
  SessionId = 16384,
  EFields_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EFields_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
Γ bool EFields_IsValid(int value);
constexpr EFields EFields_MIN = FieldsNone;
constexpr EFields EFields_MAX = SessionId;
constexpr int EFields_ARRAYSIZE = EFields_MAX + 1;

Γ const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EFields_descriptor();
template<typename T>
inline const std::string& EFields_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EFields>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EFields_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EFields_descriptor(), enum_t_value);
}
inline bool EFields_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EFields* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EFields>(
    EFields_descriptor(), name, value);
}
enum EFromServer : int {
  Ping = 0,
  Error_ = 1,
  ReadError = 2,
  EFromServer_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EFromServer_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
Γ bool EFromServer_IsValid(int value);
constexpr EFromServer EFromServer_MIN = Ping;
constexpr EFromServer EFromServer_MAX = ReadError;
constexpr int EFromServer_ARRAYSIZE = EFromServer_MAX + 1;

Γ const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EFromServer_descriptor();
template<typename T>
inline const std::string& EFromServer_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EFromServer>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EFromServer_Name.");
  return EFromServer_Name(static_cast<EFromServer>(enum_t_value));
}
template<>
inline const std::string& EFromServer_Name(EFromServer value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum
    <EFromServer_descriptor, 0, 2>(static_cast<int>(value));
}
inline bool EFromServer_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EFromServer* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EFromServer>(
    EFromServer_descriptor(), name, value);
}
// ===================================================================

class Γ Instance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Logging.Proto.Instance) */ {
 public:
  inline Instance() : Instance(nullptr) {}
  ~Instance() override;
  explicit PROTOBUF_CONSTEXPR Instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Instance(const Instance& from);
  Instance(Instance&& from) noexcept
    : Instance() {
    *this = ::std::move(from);
  }

  inline Instance& operator=(const Instance& from) {
    CopyFrom(from);
    return *this;
  }
  inline Instance& operator=(Instance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Instance& default_instance() {
    return *internal_default_instance();
  }
  static inline const Instance* internal_default_instance() {
    return reinterpret_cast<const Instance*>(
               &_Instance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Instance& a, Instance& b) {
    a.Swap(&b);
  }
  inline void Swap(Instance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Instance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Instance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Instance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Instance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Instance& from) {
    Instance::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Instance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Logging.Proto.Instance";
  }
  protected:
  explicit Instance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplicationFieldNumber = 1,
    kHostFieldNumber = 2,
    kPidFieldNumber = 3,
    kServerLogLevelFieldNumber = 4,
    kClientLogLevelFieldNumber = 5,
    kStartTimeFieldNumber = 6,
  };
  // string application = 1;
  void clear_application();
  const std::string& application() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_application(ArgT0&& arg0, ArgT... args);
  std::string* mutable_application();
  PROTOBUF_NODISCARD std::string* release_application();
  void set_allocated_application(std::string* application);
  private:
  const std::string& _internal_application() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_application(const std::string& value);
  std::string* _internal_mutable_application();
  public:

  // string host = 2;
  void clear_host();
  const std::string& host() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host();
  PROTOBUF_NODISCARD std::string* release_host();
  void set_allocated_host(std::string* host);
  private:
  const std::string& _internal_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // int32 pid = 3;
  void clear_pid();
  int32_t pid() const;
  void set_pid(int32_t value);
  private:
  int32_t _internal_pid() const;
  void _internal_set_pid(int32_t value);
  public:

  // .Jde.Logging.Proto.ELogLevel server_log_level = 4;
  void clear_server_log_level();
  ::Jde::Logging::Proto::ELogLevel server_log_level() const;
  void set_server_log_level(::Jde::Logging::Proto::ELogLevel value);
  private:
  ::Jde::Logging::Proto::ELogLevel _internal_server_log_level() const;
  void _internal_set_server_log_level(::Jde::Logging::Proto::ELogLevel value);
  public:

  // .Jde.Logging.Proto.ELogLevel client_log_level = 5;
  void clear_client_log_level();
  ::Jde::Logging::Proto::ELogLevel client_log_level() const;
  void set_client_log_level(::Jde::Logging::Proto::ELogLevel value);
  private:
  ::Jde::Logging::Proto::ELogLevel _internal_client_log_level() const;
  void _internal_set_client_log_level(::Jde::Logging::Proto::ELogLevel value);
  public:

  // uint32 start_time = 6;
  void clear_start_time();
  uint32_t start_time() const;
  void set_start_time(uint32_t value);
  private:
  uint32_t _internal_start_time() const;
  void _internal_set_start_time(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Logging.Proto.Instance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr application_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
    int32_t pid_;
    int server_log_level_;
    int client_log_level_;
    uint32_t start_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Γ Message final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Logging.Proto.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  ~Message() override;
  explicit PROTOBUF_CONSTEXPR Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Message& from) {
    Message::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Logging.Proto.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVariablesFieldNumber = 9,
    kTimeFieldNumber = 1,
    kLevelFieldNumber = 2,
    kMessageIdFieldNumber = 3,
    kFileIdFieldNumber = 4,
    kFunctionIdFieldNumber = 5,
    kLineNumberFieldNumber = 6,
    kUserIdFieldNumber = 7,
    kThreadIdFieldNumber = 8,
  };
  // repeated string Variables = 9;
  int variables_size() const;
  private:
  int _internal_variables_size() const;
  public:
  void clear_variables();
  const std::string& variables(int index) const;
  std::string* mutable_variables(int index);
  void set_variables(int index, const std::string& value);
  void set_variables(int index, std::string&& value);
  void set_variables(int index, const char* value);
  void set_variables(int index, const char* value, size_t size);
  std::string* add_variables();
  void add_variables(const std::string& value);
  void add_variables(std::string&& value);
  void add_variables(const char* value);
  void add_variables(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& variables() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_variables();
  private:
  const std::string& _internal_variables(int index) const;
  std::string* _internal_add_variables();
  public:

  // .google.protobuf.Timestamp Time = 1;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time();

  // .Jde.Logging.Proto.ELogLevel Level = 2;
  void clear_level();
  ::Jde::Logging::Proto::ELogLevel level() const;
  void set_level(::Jde::Logging::Proto::ELogLevel value);
  private:
  ::Jde::Logging::Proto::ELogLevel _internal_level() const;
  void _internal_set_level(::Jde::Logging::Proto::ELogLevel value);
  public:

  // uint32 MessageId = 3;
  void clear_messageid();
  uint32_t messageid() const;
  void set_messageid(uint32_t value);
  private:
  uint32_t _internal_messageid() const;
  void _internal_set_messageid(uint32_t value);
  public:

  // uint32 FileId = 4;
  void clear_fileid();
  uint32_t fileid() const;
  void set_fileid(uint32_t value);
  private:
  uint32_t _internal_fileid() const;
  void _internal_set_fileid(uint32_t value);
  public:

  // uint32 FunctionId = 5;
  void clear_functionid();
  uint32_t functionid() const;
  void set_functionid(uint32_t value);
  private:
  uint32_t _internal_functionid() const;
  void _internal_set_functionid(uint32_t value);
  public:

  // uint32 LineNumber = 6;
  void clear_linenumber();
  uint32_t linenumber() const;
  void set_linenumber(uint32_t value);
  private:
  uint32_t _internal_linenumber() const;
  void _internal_set_linenumber(uint32_t value);
  public:

  // uint32 UserId = 7;
  void clear_userid();
  uint32_t userid() const;
  void set_userid(uint32_t value);
  private:
  uint32_t _internal_userid() const;
  void _internal_set_userid(uint32_t value);
  public:

  // uint64 ThreadId = 8;
  void clear_threadid();
  uint64_t threadid() const;
  void set_threadid(uint64_t value);
  private:
  uint64_t _internal_threadid() const;
  void _internal_set_threadid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Logging.Proto.Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> variables_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time_;
    int level_;
    uint32_t messageid_;
    uint32_t fileid_;
    uint32_t functionid_;
    uint32_t linenumber_;
    uint32_t userid_;
    uint64_t threadid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Γ SessionInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Logging.Proto.SessionInfo) */ {
 public:
  inline SessionInfo() : SessionInfo(nullptr) {}
  ~SessionInfo() override;
  explicit PROTOBUF_CONSTEXPR SessionInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SessionInfo(const SessionInfo& from);
  SessionInfo(SessionInfo&& from) noexcept
    : SessionInfo() {
    *this = ::std::move(from);
  }

  inline SessionInfo& operator=(const SessionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionInfo& operator=(SessionInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SessionInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SessionInfo* internal_default_instance() {
    return reinterpret_cast<const SessionInfo*>(
               &_SessionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SessionInfo& a, SessionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SessionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SessionInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SessionInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SessionInfo& from) {
    SessionInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Logging.Proto.SessionInfo";
  }
  protected:
  explicit SessionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExpirationFieldNumber = 1,
    kSessionIdFieldNumber = 2,
    kUserIdFieldNumber = 3,
  };
  // .google.protobuf.Timestamp expiration = 1;
  bool has_expiration() const;
  private:
  bool _internal_has_expiration() const;
  public:
  void clear_expiration();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& expiration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_expiration();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_expiration();
  void set_allocated_expiration(::PROTOBUF_NAMESPACE_ID::Timestamp* expiration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_expiration() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_expiration();
  public:
  void unsafe_arena_set_allocated_expiration(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* expiration);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_expiration();

  // uint32 session_id = 2;
  void clear_session_id();
  uint32_t session_id() const;
  void set_session_id(uint32_t value);
  private:
  uint32_t _internal_session_id() const;
  void _internal_set_session_id(uint32_t value);
  public:

  // uint32 user_id = 3;
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Logging.Proto.SessionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Timestamp* expiration_;
    uint32_t session_id_;
    uint32_t user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Γ RequestString final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Logging.Proto.RequestString) */ {
 public:
  inline RequestString() : RequestString(nullptr) {}
  ~RequestString() override;
  explicit PROTOBUF_CONSTEXPR RequestString(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestString(const RequestString& from);
  RequestString(RequestString&& from) noexcept
    : RequestString() {
    *this = ::std::move(from);
  }

  inline RequestString& operator=(const RequestString& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestString& operator=(RequestString&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestString& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestString* internal_default_instance() {
    return reinterpret_cast<const RequestString*>(
               &_RequestString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RequestString& a, RequestString& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestString* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestString>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestString& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RequestString& from) {
    RequestString::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestString* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Logging.Proto.RequestString";
  }
  protected:
  explicit RequestString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 3,
    kFieldFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // string Value = 3;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .Jde.Logging.Proto.EFields Field = 1;
  void clear_field();
  ::Jde::Logging::Proto::EFields field() const;
  void set_field(::Jde::Logging::Proto::EFields value);
  private:
  ::Jde::Logging::Proto::EFields _internal_field() const;
  void _internal_set_field(::Jde::Logging::Proto::EFields value);
  public:

  // uint32 Id = 2;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Logging.Proto.RequestString)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    int field_;
    uint32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Γ Status final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Logging.Proto.Status) */ {
 public:
  inline Status() : Status(nullptr) {}
  ~Status() override;
  explicit PROTOBUF_CONSTEXPR Status(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Status(const Status& from);
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Status& default_instance() {
    return *internal_default_instance();
  }
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Status& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Status& from) {
    Status::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Logging.Proto.Status";
  }
  protected:
  explicit Status(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetailsFieldNumber = 5,
    kMemoryFieldNumber = 2,
    kStartTimeFieldNumber = 1,
    kServerLogLevelFieldNumber = 3,
    kClientLogLevelFieldNumber = 4,
  };
  // repeated string Details = 5;
  int details_size() const;
  private:
  int _internal_details_size() const;
  public:
  void clear_details();
  const std::string& details(int index) const;
  std::string* mutable_details(int index);
  void set_details(int index, const std::string& value);
  void set_details(int index, std::string&& value);
  void set_details(int index, const char* value);
  void set_details(int index, const char* value, size_t size);
  std::string* add_details();
  void add_details(const std::string& value);
  void add_details(std::string&& value);
  void add_details(const char* value);
  void add_details(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& details() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_details();
  private:
  const std::string& _internal_details(int index) const;
  std::string* _internal_add_details();
  public:

  // uint64 Memory = 2;
  void clear_memory();
  uint64_t memory() const;
  void set_memory(uint64_t value);
  private:
  uint64_t _internal_memory() const;
  void _internal_set_memory(uint64_t value);
  public:

  // uint32 StartTime = 1;
  void clear_starttime();
  uint32_t starttime() const;
  void set_starttime(uint32_t value);
  private:
  uint32_t _internal_starttime() const;
  void _internal_set_starttime(uint32_t value);
  public:

  // .Jde.Logging.Proto.ELogLevel ServerLogLevel = 3;
  void clear_serverloglevel();
  ::Jde::Logging::Proto::ELogLevel serverloglevel() const;
  void set_serverloglevel(::Jde::Logging::Proto::ELogLevel value);
  private:
  ::Jde::Logging::Proto::ELogLevel _internal_serverloglevel() const;
  void _internal_set_serverloglevel(::Jde::Logging::Proto::ELogLevel value);
  public:

  // .Jde.Logging.Proto.ELogLevel ClientLogLevel = 4;
  void clear_clientloglevel();
  ::Jde::Logging::Proto::ELogLevel clientloglevel() const;
  void set_clientloglevel(::Jde::Logging::Proto::ELogLevel value);
  private:
  ::Jde::Logging::Proto::ELogLevel _internal_clientloglevel() const;
  void _internal_set_clientloglevel(::Jde::Logging::Proto::ELogLevel value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Logging.Proto.Status)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> details_;
    uint64_t memory_;
    uint32_t starttime_;
    int serverloglevel_;
    int clientloglevel_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Γ CustomMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Logging.Proto.CustomMessage) */ {
 public:
  inline CustomMessage() : CustomMessage(nullptr) {}
  ~CustomMessage() override;
  explicit PROTOBUF_CONSTEXPR CustomMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustomMessage(const CustomMessage& from);
  CustomMessage(CustomMessage&& from) noexcept
    : CustomMessage() {
    *this = ::std::move(from);
  }

  inline CustomMessage& operator=(const CustomMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomMessage& operator=(CustomMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CustomMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CustomMessage* internal_default_instance() {
    return reinterpret_cast<const CustomMessage*>(
               &_CustomMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CustomMessage& a, CustomMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CustomMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CustomMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CustomMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CustomMessage& from) {
    CustomMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Logging.Proto.CustomMessage";
  }
  protected:
  explicit CustomMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kRequestIdFieldNumber = 1,
  };
  // bytes Message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // uint32 RequestId = 1;
  void clear_requestid();
  uint32_t requestid() const;
  void set_requestid(uint32_t value);
  private:
  uint32_t _internal_requestid() const;
  void _internal_set_requestid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Logging.Proto.CustomMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    uint32_t requestid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Γ CustomComplete final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Logging.Proto.CustomComplete) */ {
 public:
  inline CustomComplete() : CustomComplete(nullptr) {}
  ~CustomComplete() override;
  explicit PROTOBUF_CONSTEXPR CustomComplete(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustomComplete(const CustomComplete& from);
  CustomComplete(CustomComplete&& from) noexcept
    : CustomComplete() {
    *this = ::std::move(from);
  }

  inline CustomComplete& operator=(const CustomComplete& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomComplete& operator=(CustomComplete&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CustomComplete& default_instance() {
    return *internal_default_instance();
  }
  static inline const CustomComplete* internal_default_instance() {
    return reinterpret_cast<const CustomComplete*>(
               &_CustomComplete_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CustomComplete& a, CustomComplete& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomComplete* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomComplete* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CustomComplete* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CustomComplete>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CustomComplete& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CustomComplete& from) {
    CustomComplete::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomComplete* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Logging.Proto.CustomComplete";
  }
  protected:
  explicit CustomComplete(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
  };
  // uint32 RequestId = 1;
  void clear_requestid();
  uint32_t requestid() const;
  void set_requestid(uint32_t value);
  private:
  uint32_t _internal_requestid() const;
  void _internal_set_requestid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Logging.Proto.CustomComplete)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t requestid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Γ RequestSessionInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Logging.Proto.RequestSessionInfo) */ {
 public:
  inline RequestSessionInfo() : RequestSessionInfo(nullptr) {}
  ~RequestSessionInfo() override;
  explicit PROTOBUF_CONSTEXPR RequestSessionInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestSessionInfo(const RequestSessionInfo& from);
  RequestSessionInfo(RequestSessionInfo&& from) noexcept
    : RequestSessionInfo() {
    *this = ::std::move(from);
  }

  inline RequestSessionInfo& operator=(const RequestSessionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestSessionInfo& operator=(RequestSessionInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestSessionInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestSessionInfo* internal_default_instance() {
    return reinterpret_cast<const RequestSessionInfo*>(
               &_RequestSessionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RequestSessionInfo& a, RequestSessionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestSessionInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestSessionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestSessionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestSessionInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestSessionInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RequestSessionInfo& from) {
    RequestSessionInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestSessionInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Logging.Proto.RequestSessionInfo";
  }
  protected:
  explicit RequestSessionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
  };
  // uint32 session_id = 1;
  void clear_session_id();
  uint32_t session_id() const;
  void set_session_id(uint32_t value);
  private:
  uint32_t _internal_session_id() const;
  void _internal_set_session_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Logging.Proto.RequestSessionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t session_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Γ ToServerUnion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Logging.Proto.ToServerUnion) */ {
 public:
  inline ToServerUnion() : ToServerUnion(nullptr) {}
  ~ToServerUnion() override;
  explicit PROTOBUF_CONSTEXPR ToServerUnion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ToServerUnion(const ToServerUnion& from);
  ToServerUnion(ToServerUnion&& from) noexcept
    : ToServerUnion() {
    *this = ::std::move(from);
  }

  inline ToServerUnion& operator=(const ToServerUnion& from) {
    CopyFrom(from);
    return *this;
  }
  inline ToServerUnion& operator=(ToServerUnion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ToServerUnion& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kInstance = 1,
    kMessage = 2,
    kString = 3,
    kStatus = 4,
    kCustom = 5,
    kComplete = 6,
    kSessionInfo = 7,
    VALUE_NOT_SET = 0,
  };

  static inline const ToServerUnion* internal_default_instance() {
    return reinterpret_cast<const ToServerUnion*>(
               &_ToServerUnion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ToServerUnion& a, ToServerUnion& b) {
    a.Swap(&b);
  }
  inline void Swap(ToServerUnion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ToServerUnion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ToServerUnion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ToServerUnion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ToServerUnion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ToServerUnion& from) {
    ToServerUnion::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ToServerUnion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Logging.Proto.ToServerUnion";
  }
  protected:
  explicit ToServerUnion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceFieldNumber = 1,
    kMessageFieldNumber = 2,
    kStringFieldNumber = 3,
    kStatusFieldNumber = 4,
    kCustomFieldNumber = 5,
    kCompleteFieldNumber = 6,
    kSessionInfoFieldNumber = 7,
  };
  // .Jde.Logging.Proto.Instance Instance = 1;
  bool has_instance() const;
  private:
  bool _internal_has_instance() const;
  public:
  void clear_instance();
  const ::Jde::Logging::Proto::Instance& instance() const;
  PROTOBUF_NODISCARD ::Jde::Logging::Proto::Instance* release_instance();
  ::Jde::Logging::Proto::Instance* mutable_instance();
  void set_allocated_instance(::Jde::Logging::Proto::Instance* instance);
  private:
  const ::Jde::Logging::Proto::Instance& _internal_instance() const;
  ::Jde::Logging::Proto::Instance* _internal_mutable_instance();
  public:
  void unsafe_arena_set_allocated_instance(
      ::Jde::Logging::Proto::Instance* instance);
  ::Jde::Logging::Proto::Instance* unsafe_arena_release_instance();

  // .Jde.Logging.Proto.Message Message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::Jde::Logging::Proto::Message& message() const;
  PROTOBUF_NODISCARD ::Jde::Logging::Proto::Message* release_message();
  ::Jde::Logging::Proto::Message* mutable_message();
  void set_allocated_message(::Jde::Logging::Proto::Message* message);
  private:
  const ::Jde::Logging::Proto::Message& _internal_message() const;
  ::Jde::Logging::Proto::Message* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::Jde::Logging::Proto::Message* message);
  ::Jde::Logging::Proto::Message* unsafe_arena_release_message();

  // .Jde.Logging.Proto.RequestString String = 3;
  bool has_string() const;
  private:
  bool _internal_has_string() const;
  public:
  void clear_string();
  const ::Jde::Logging::Proto::RequestString& string() const;
  PROTOBUF_NODISCARD ::Jde::Logging::Proto::RequestString* release_string();
  ::Jde::Logging::Proto::RequestString* mutable_string();
  void set_allocated_string(::Jde::Logging::Proto::RequestString* string);
  private:
  const ::Jde::Logging::Proto::RequestString& _internal_string() const;
  ::Jde::Logging::Proto::RequestString* _internal_mutable_string();
  public:
  void unsafe_arena_set_allocated_string(
      ::Jde::Logging::Proto::RequestString* string);
  ::Jde::Logging::Proto::RequestString* unsafe_arena_release_string();

  // .Jde.Logging.Proto.Status Status = 4;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::Jde::Logging::Proto::Status& status() const;
  PROTOBUF_NODISCARD ::Jde::Logging::Proto::Status* release_status();
  ::Jde::Logging::Proto::Status* mutable_status();
  void set_allocated_status(::Jde::Logging::Proto::Status* status);
  private:
  const ::Jde::Logging::Proto::Status& _internal_status() const;
  ::Jde::Logging::Proto::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::Jde::Logging::Proto::Status* status);
  ::Jde::Logging::Proto::Status* unsafe_arena_release_status();

  // .Jde.Logging.Proto.CustomMessage Custom = 5;
  bool has_custom() const;
  private:
  bool _internal_has_custom() const;
  public:
  void clear_custom();
  const ::Jde::Logging::Proto::CustomMessage& custom() const;
  PROTOBUF_NODISCARD ::Jde::Logging::Proto::CustomMessage* release_custom();
  ::Jde::Logging::Proto::CustomMessage* mutable_custom();
  void set_allocated_custom(::Jde::Logging::Proto::CustomMessage* custom);
  private:
  const ::Jde::Logging::Proto::CustomMessage& _internal_custom() const;
  ::Jde::Logging::Proto::CustomMessage* _internal_mutable_custom();
  public:
  void unsafe_arena_set_allocated_custom(
      ::Jde::Logging::Proto::CustomMessage* custom);
  ::Jde::Logging::Proto::CustomMessage* unsafe_arena_release_custom();

  // .Jde.Logging.Proto.CustomComplete Complete = 6;
  bool has_complete() const;
  private:
  bool _internal_has_complete() const;
  public:
  void clear_complete();
  const ::Jde::Logging::Proto::CustomComplete& complete() const;
  PROTOBUF_NODISCARD ::Jde::Logging::Proto::CustomComplete* release_complete();
  ::Jde::Logging::Proto::CustomComplete* mutable_complete();
  void set_allocated_complete(::Jde::Logging::Proto::CustomComplete* complete);
  private:
  const ::Jde::Logging::Proto::CustomComplete& _internal_complete() const;
  ::Jde::Logging::Proto::CustomComplete* _internal_mutable_complete();
  public:
  void unsafe_arena_set_allocated_complete(
      ::Jde::Logging::Proto::CustomComplete* complete);
  ::Jde::Logging::Proto::CustomComplete* unsafe_arena_release_complete();

  // .Jde.Logging.Proto.RequestSessionInfo session_info = 7;
  bool has_session_info() const;
  private:
  bool _internal_has_session_info() const;
  public:
  void clear_session_info();
  const ::Jde::Logging::Proto::RequestSessionInfo& session_info() const;
  PROTOBUF_NODISCARD ::Jde::Logging::Proto::RequestSessionInfo* release_session_info();
  ::Jde::Logging::Proto::RequestSessionInfo* mutable_session_info();
  void set_allocated_session_info(::Jde::Logging::Proto::RequestSessionInfo* session_info);
  private:
  const ::Jde::Logging::Proto::RequestSessionInfo& _internal_session_info() const;
  ::Jde::Logging::Proto::RequestSessionInfo* _internal_mutable_session_info();
  public:
  void unsafe_arena_set_allocated_session_info(
      ::Jde::Logging::Proto::RequestSessionInfo* session_info);
  ::Jde::Logging::Proto::RequestSessionInfo* unsafe_arena_release_session_info();

  void clear_Value();
  ValueCase Value_case() const;
  // @@protoc_insertion_point(class_scope:Jde.Logging.Proto.ToServerUnion)
 private:
  class _Internal;
  void set_has_instance();
  void set_has_message();
  void set_has_string();
  void set_has_status();
  void set_has_custom();
  void set_has_complete();
  void set_has_session_info();

  inline bool has_Value() const;
  inline void clear_has_Value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::Jde::Logging::Proto::Instance* instance_;
      ::Jde::Logging::Proto::Message* message_;
      ::Jde::Logging::Proto::RequestString* string_;
      ::Jde::Logging::Proto::Status* status_;
      ::Jde::Logging::Proto::CustomMessage* custom_;
      ::Jde::Logging::Proto::CustomComplete* complete_;
      ::Jde::Logging::Proto::RequestSessionInfo* session_info_;
    } Value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Γ ToServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Logging.Proto.ToServer) */ {
 public:
  inline ToServer() : ToServer(nullptr) {}
  ~ToServer() override;
  explicit PROTOBUF_CONSTEXPR ToServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ToServer(const ToServer& from);
  ToServer(ToServer&& from) noexcept
    : ToServer() {
    *this = ::std::move(from);
  }

  inline ToServer& operator=(const ToServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ToServer& operator=(ToServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ToServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const ToServer* internal_default_instance() {
    return reinterpret_cast<const ToServer*>(
               &_ToServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ToServer& a, ToServer& b) {
    a.Swap(&b);
  }
  inline void Swap(ToServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ToServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ToServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ToServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ToServer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ToServer& from) {
    ToServer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ToServer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Logging.Proto.ToServer";
  }
  protected:
  explicit ToServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 1,
  };
  // repeated .Jde.Logging.Proto.ToServerUnion Messages = 1;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  ::Jde::Logging::Proto::ToServerUnion* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Logging::Proto::ToServerUnion >*
      mutable_messages();
  private:
  const ::Jde::Logging::Proto::ToServerUnion& _internal_messages(int index) const;
  ::Jde::Logging::Proto::ToServerUnion* _internal_add_messages();
  public:
  const ::Jde::Logging::Proto::ToServerUnion& messages(int index) const;
  ::Jde::Logging::Proto::ToServerUnion* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Logging::Proto::ToServerUnion >&
      messages() const;

  // @@protoc_insertion_point(class_scope:Jde.Logging.Proto.ToServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Logging::Proto::ToServerUnion > messages_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Γ Acknowledgement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Logging.Proto.Acknowledgement) */ {
 public:
  inline Acknowledgement() : Acknowledgement(nullptr) {}
  ~Acknowledgement() override;
  explicit PROTOBUF_CONSTEXPR Acknowledgement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Acknowledgement(const Acknowledgement& from);
  Acknowledgement(Acknowledgement&& from) noexcept
    : Acknowledgement() {
    *this = ::std::move(from);
  }

  inline Acknowledgement& operator=(const Acknowledgement& from) {
    CopyFrom(from);
    return *this;
  }
  inline Acknowledgement& operator=(Acknowledgement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Acknowledgement& default_instance() {
    return *internal_default_instance();
  }
  static inline const Acknowledgement* internal_default_instance() {
    return reinterpret_cast<const Acknowledgement*>(
               &_Acknowledgement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Acknowledgement& a, Acknowledgement& b) {
    a.Swap(&b);
  }
  inline void Swap(Acknowledgement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Acknowledgement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Acknowledgement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Acknowledgement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Acknowledgement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Acknowledgement& from) {
    Acknowledgement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Acknowledgement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Logging.Proto.Acknowledgement";
  }
  protected:
  explicit Acknowledgement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceIdFieldNumber = 1,
  };
  // uint32 InstanceId = 1;
  void clear_instanceid();
  uint32_t instanceid() const;
  void set_instanceid(uint32_t value);
  private:
  uint32_t _internal_instanceid() const;
  void _internal_set_instanceid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Logging.Proto.Acknowledgement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t instanceid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Γ GenericFromServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Logging.Proto.GenericFromServer) */ {
 public:
  inline GenericFromServer() : GenericFromServer(nullptr) {}
  ~GenericFromServer() override;
  explicit PROTOBUF_CONSTEXPR GenericFromServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenericFromServer(const GenericFromServer& from);
  GenericFromServer(GenericFromServer&& from) noexcept
    : GenericFromServer() {
    *this = ::std::move(from);
  }

  inline GenericFromServer& operator=(const GenericFromServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenericFromServer& operator=(GenericFromServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenericFromServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenericFromServer* internal_default_instance() {
    return reinterpret_cast<const GenericFromServer*>(
               &_GenericFromServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GenericFromServer& a, GenericFromServer& b) {
    a.Swap(&b);
  }
  inline void Swap(GenericFromServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenericFromServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GenericFromServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GenericFromServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenericFromServer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GenericFromServer& from) {
    GenericFromServer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenericFromServer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Logging.Proto.GenericFromServer";
  }
  protected:
  explicit GenericFromServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 2,
    kWhatFieldNumber = 1,
  };
  // string Description = 2;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .Jde.Logging.Proto.EFromServer What = 1;
  void clear_what();
  ::Jde::Logging::Proto::EFromServer what() const;
  void set_what(::Jde::Logging::Proto::EFromServer value);
  private:
  ::Jde::Logging::Proto::EFromServer _internal_what() const;
  void _internal_set_what(::Jde::Logging::Proto::EFromServer value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Logging.Proto.GenericFromServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    int what_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Γ Strings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Logging.Proto.Strings) */ {
 public:
  inline Strings() : Strings(nullptr) {}
  ~Strings() override;
  explicit PROTOBUF_CONSTEXPR Strings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Strings(const Strings& from);
  Strings(Strings&& from) noexcept
    : Strings() {
    *this = ::std::move(from);
  }

  inline Strings& operator=(const Strings& from) {
    CopyFrom(from);
    return *this;
  }
  inline Strings& operator=(Strings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Strings& default_instance() {
    return *internal_default_instance();
  }
  static inline const Strings* internal_default_instance() {
    return reinterpret_cast<const Strings*>(
               &_Strings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Strings& a, Strings& b) {
    a.Swap(&b);
  }
  inline void Swap(Strings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Strings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Strings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Strings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Strings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Strings& from) {
    Strings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Strings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Logging.Proto.Strings";
  }
  protected:
  explicit Strings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 1,
    kFilesFieldNumber = 2,
    kFunctionsFieldNumber = 3,
    kThreadsFieldNumber = 4,
  };
  // repeated uint32 Messages = 1;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  private:
  uint32_t _internal_messages(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_messages() const;
  void _internal_add_messages(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_messages();
  public:
  uint32_t messages(int index) const;
  void set_messages(int index, uint32_t value);
  void add_messages(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      messages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_messages();

  // repeated uint32 Files = 2;
  int files_size() const;
  private:
  int _internal_files_size() const;
  public:
  void clear_files();
  private:
  uint32_t _internal_files(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_files() const;
  void _internal_add_files(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_files();
  public:
  uint32_t files(int index) const;
  void set_files(int index, uint32_t value);
  void add_files(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      files() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_files();

  // repeated uint32 Functions = 3;
  int functions_size() const;
  private:
  int _internal_functions_size() const;
  public:
  void clear_functions();
  private:
  uint32_t _internal_functions(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_functions() const;
  void _internal_add_functions(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_functions();
  public:
  uint32_t functions(int index) const;
  void set_functions(int index, uint32_t value);
  void add_functions(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      functions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_functions();

  // repeated uint32 Threads = 4;
  int threads_size() const;
  private:
  int _internal_threads_size() const;
  public:
  void clear_threads();
  private:
  uint32_t _internal_threads(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_threads() const;
  void _internal_add_threads(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_threads();
  public:
  uint32_t threads(int index) const;
  void set_threads(int index, uint32_t value);
  void add_threads(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      threads() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_threads();

  // @@protoc_insertion_point(class_scope:Jde.Logging.Proto.Strings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > messages_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _messages_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > files_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _files_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > functions_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _functions_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > threads_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _threads_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Γ Progress final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Logging.Proto.Progress) */ {
 public:
  inline Progress() : Progress(nullptr) {}
  ~Progress() override;
  explicit PROTOBUF_CONSTEXPR Progress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Progress(const Progress& from);
  Progress(Progress&& from) noexcept
    : Progress() {
    *this = ::std::move(from);
  }

  inline Progress& operator=(const Progress& from) {
    CopyFrom(from);
    return *this;
  }
  inline Progress& operator=(Progress&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Progress& default_instance() {
    return *internal_default_instance();
  }
  static inline const Progress* internal_default_instance() {
    return reinterpret_cast<const Progress*>(
               &_Progress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Progress& a, Progress& b) {
    a.Swap(&b);
  }
  inline void Swap(Progress* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Progress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Progress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Progress>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Progress& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Progress& from) {
    Progress::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Progress* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Logging.Proto.Progress";
  }
  protected:
  explicit Progress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kRequestIdFieldNumber = 1,
  };
  // double Value = 2;
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // uint32 RequestId = 1;
  void clear_requestid();
  uint32_t requestid() const;
  void set_requestid(uint32_t value);
  private:
  uint32_t _internal_requestid() const;
  void _internal_set_requestid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Logging.Proto.Progress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double value_;
    uint32_t requestid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Γ LogLevels final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Logging.Proto.LogLevels) */ {
 public:
  inline LogLevels() : LogLevels(nullptr) {}
  ~LogLevels() override;
  explicit PROTOBUF_CONSTEXPR LogLevels(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogLevels(const LogLevels& from);
  LogLevels(LogLevels&& from) noexcept
    : LogLevels() {
    *this = ::std::move(from);
  }

  inline LogLevels& operator=(const LogLevels& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogLevels& operator=(LogLevels&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogLevels& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogLevels* internal_default_instance() {
    return reinterpret_cast<const LogLevels*>(
               &_LogLevels_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(LogLevels& a, LogLevels& b) {
    a.Swap(&b);
  }
  inline void Swap(LogLevels* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogLevels* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogLevels* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogLevels>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogLevels& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LogLevels& from) {
    LogLevels::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogLevels* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Logging.Proto.LogLevels";
  }
  protected:
  explicit LogLevels(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerFieldNumber = 1,
    kClientFieldNumber = 2,
  };
  // .Jde.Logging.Proto.ELogLevel Server = 1;
  void clear_server();
  ::Jde::Logging::Proto::ELogLevel server() const;
  void set_server(::Jde::Logging::Proto::ELogLevel value);
  private:
  ::Jde::Logging::Proto::ELogLevel _internal_server() const;
  void _internal_set_server(::Jde::Logging::Proto::ELogLevel value);
  public:

  // .Jde.Logging.Proto.ELogLevel Client = 2;
  void clear_client();
  ::Jde::Logging::Proto::ELogLevel client() const;
  void set_client(::Jde::Logging::Proto::ELogLevel value);
  private:
  ::Jde::Logging::Proto::ELogLevel _internal_client() const;
  void _internal_set_client(::Jde::Logging::Proto::ELogLevel value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Logging.Proto.LogLevels)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int server_;
    int client_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Γ FromServerUnion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Logging.Proto.FromServerUnion) */ {
 public:
  inline FromServerUnion() : FromServerUnion(nullptr) {}
  ~FromServerUnion() override;
  explicit PROTOBUF_CONSTEXPR FromServerUnion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FromServerUnion(const FromServerUnion& from);
  FromServerUnion(FromServerUnion&& from) noexcept
    : FromServerUnion() {
    *this = ::std::move(from);
  }

  inline FromServerUnion& operator=(const FromServerUnion& from) {
    CopyFrom(from);
    return *this;
  }
  inline FromServerUnion& operator=(FromServerUnion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FromServerUnion& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kAcknowledgement = 1,
    kGeneric = 2,
    kStrings = 3,
    kLogLevels = 4,
    kCustom = 5,
    kProgress = 6,
    kSessionInfo = 7,
    VALUE_NOT_SET = 0,
  };

  static inline const FromServerUnion* internal_default_instance() {
    return reinterpret_cast<const FromServerUnion*>(
               &_FromServerUnion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(FromServerUnion& a, FromServerUnion& b) {
    a.Swap(&b);
  }
  inline void Swap(FromServerUnion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FromServerUnion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FromServerUnion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FromServerUnion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FromServerUnion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FromServerUnion& from) {
    FromServerUnion::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FromServerUnion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Logging.Proto.FromServerUnion";
  }
  protected:
  explicit FromServerUnion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAcknowledgementFieldNumber = 1,
    kGenericFieldNumber = 2,
    kStringsFieldNumber = 3,
    kLogLevelsFieldNumber = 4,
    kCustomFieldNumber = 5,
    kProgressFieldNumber = 6,
    kSessionInfoFieldNumber = 7,
  };
  // .Jde.Logging.Proto.Acknowledgement Acknowledgement = 1;
  bool has_acknowledgement() const;
  private:
  bool _internal_has_acknowledgement() const;
  public:
  void clear_acknowledgement();
  const ::Jde::Logging::Proto::Acknowledgement& acknowledgement() const;
  PROTOBUF_NODISCARD ::Jde::Logging::Proto::Acknowledgement* release_acknowledgement();
  ::Jde::Logging::Proto::Acknowledgement* mutable_acknowledgement();
  void set_allocated_acknowledgement(::Jde::Logging::Proto::Acknowledgement* acknowledgement);
  private:
  const ::Jde::Logging::Proto::Acknowledgement& _internal_acknowledgement() const;
  ::Jde::Logging::Proto::Acknowledgement* _internal_mutable_acknowledgement();
  public:
  void unsafe_arena_set_allocated_acknowledgement(
      ::Jde::Logging::Proto::Acknowledgement* acknowledgement);
  ::Jde::Logging::Proto::Acknowledgement* unsafe_arena_release_acknowledgement();

  // .Jde.Logging.Proto.GenericFromServer Generic = 2;
  bool has_generic() const;
  private:
  bool _internal_has_generic() const;
  public:
  void clear_generic();
  const ::Jde::Logging::Proto::GenericFromServer& generic() const;
  PROTOBUF_NODISCARD ::Jde::Logging::Proto::GenericFromServer* release_generic();
  ::Jde::Logging::Proto::GenericFromServer* mutable_generic();
  void set_allocated_generic(::Jde::Logging::Proto::GenericFromServer* generic);
  private:
  const ::Jde::Logging::Proto::GenericFromServer& _internal_generic() const;
  ::Jde::Logging::Proto::GenericFromServer* _internal_mutable_generic();
  public:
  void unsafe_arena_set_allocated_generic(
      ::Jde::Logging::Proto::GenericFromServer* generic);
  ::Jde::Logging::Proto::GenericFromServer* unsafe_arena_release_generic();

  // .Jde.Logging.Proto.Strings Strings = 3;
  bool has_strings() const;
  private:
  bool _internal_has_strings() const;
  public:
  void clear_strings();
  const ::Jde::Logging::Proto::Strings& strings() const;
  PROTOBUF_NODISCARD ::Jde::Logging::Proto::Strings* release_strings();
  ::Jde::Logging::Proto::Strings* mutable_strings();
  void set_allocated_strings(::Jde::Logging::Proto::Strings* strings);
  private:
  const ::Jde::Logging::Proto::Strings& _internal_strings() const;
  ::Jde::Logging::Proto::Strings* _internal_mutable_strings();
  public:
  void unsafe_arena_set_allocated_strings(
      ::Jde::Logging::Proto::Strings* strings);
  ::Jde::Logging::Proto::Strings* unsafe_arena_release_strings();

  // .Jde.Logging.Proto.LogLevels LogLevels = 4;
  bool has_loglevels() const;
  private:
  bool _internal_has_loglevels() const;
  public:
  void clear_loglevels();
  const ::Jde::Logging::Proto::LogLevels& loglevels() const;
  PROTOBUF_NODISCARD ::Jde::Logging::Proto::LogLevels* release_loglevels();
  ::Jde::Logging::Proto::LogLevels* mutable_loglevels();
  void set_allocated_loglevels(::Jde::Logging::Proto::LogLevels* loglevels);
  private:
  const ::Jde::Logging::Proto::LogLevels& _internal_loglevels() const;
  ::Jde::Logging::Proto::LogLevels* _internal_mutable_loglevels();
  public:
  void unsafe_arena_set_allocated_loglevels(
      ::Jde::Logging::Proto::LogLevels* loglevels);
  ::Jde::Logging::Proto::LogLevels* unsafe_arena_release_loglevels();

  // .Jde.Logging.Proto.CustomMessage Custom = 5;
  bool has_custom() const;
  private:
  bool _internal_has_custom() const;
  public:
  void clear_custom();
  const ::Jde::Logging::Proto::CustomMessage& custom() const;
  PROTOBUF_NODISCARD ::Jde::Logging::Proto::CustomMessage* release_custom();
  ::Jde::Logging::Proto::CustomMessage* mutable_custom();
  void set_allocated_custom(::Jde::Logging::Proto::CustomMessage* custom);
  private:
  const ::Jde::Logging::Proto::CustomMessage& _internal_custom() const;
  ::Jde::Logging::Proto::CustomMessage* _internal_mutable_custom();
  public:
  void unsafe_arena_set_allocated_custom(
      ::Jde::Logging::Proto::CustomMessage* custom);
  ::Jde::Logging::Proto::CustomMessage* unsafe_arena_release_custom();

  // .Jde.Logging.Proto.Progress Progress = 6;
  bool has_progress() const;
  private:
  bool _internal_has_progress() const;
  public:
  void clear_progress();
  const ::Jde::Logging::Proto::Progress& progress() const;
  PROTOBUF_NODISCARD ::Jde::Logging::Proto::Progress* release_progress();
  ::Jde::Logging::Proto::Progress* mutable_progress();
  void set_allocated_progress(::Jde::Logging::Proto::Progress* progress);
  private:
  const ::Jde::Logging::Proto::Progress& _internal_progress() const;
  ::Jde::Logging::Proto::Progress* _internal_mutable_progress();
  public:
  void unsafe_arena_set_allocated_progress(
      ::Jde::Logging::Proto::Progress* progress);
  ::Jde::Logging::Proto::Progress* unsafe_arena_release_progress();

  // .Jde.Logging.Proto.SessionInfo session_info = 7;
  bool has_session_info() const;
  private:
  bool _internal_has_session_info() const;
  public:
  void clear_session_info();
  const ::Jde::Logging::Proto::SessionInfo& session_info() const;
  PROTOBUF_NODISCARD ::Jde::Logging::Proto::SessionInfo* release_session_info();
  ::Jde::Logging::Proto::SessionInfo* mutable_session_info();
  void set_allocated_session_info(::Jde::Logging::Proto::SessionInfo* session_info);
  private:
  const ::Jde::Logging::Proto::SessionInfo& _internal_session_info() const;
  ::Jde::Logging::Proto::SessionInfo* _internal_mutable_session_info();
  public:
  void unsafe_arena_set_allocated_session_info(
      ::Jde::Logging::Proto::SessionInfo* session_info);
  ::Jde::Logging::Proto::SessionInfo* unsafe_arena_release_session_info();

  void clear_Value();
  ValueCase Value_case() const;
  // @@protoc_insertion_point(class_scope:Jde.Logging.Proto.FromServerUnion)
 private:
  class _Internal;
  void set_has_acknowledgement();
  void set_has_generic();
  void set_has_strings();
  void set_has_loglevels();
  void set_has_custom();
  void set_has_progress();
  void set_has_session_info();

  inline bool has_Value() const;
  inline void clear_has_Value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::Jde::Logging::Proto::Acknowledgement* acknowledgement_;
      ::Jde::Logging::Proto::GenericFromServer* generic_;
      ::Jde::Logging::Proto::Strings* strings_;
      ::Jde::Logging::Proto::LogLevels* loglevels_;
      ::Jde::Logging::Proto::CustomMessage* custom_;
      ::Jde::Logging::Proto::Progress* progress_;
      ::Jde::Logging::Proto::SessionInfo* session_info_;
    } Value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Γ FromServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Logging.Proto.FromServer) */ {
 public:
  inline FromServer() : FromServer(nullptr) {}
  ~FromServer() override;
  explicit PROTOBUF_CONSTEXPR FromServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FromServer(const FromServer& from);
  FromServer(FromServer&& from) noexcept
    : FromServer() {
    *this = ::std::move(from);
  }

  inline FromServer& operator=(const FromServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline FromServer& operator=(FromServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FromServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const FromServer* internal_default_instance() {
    return reinterpret_cast<const FromServer*>(
               &_FromServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(FromServer& a, FromServer& b) {
    a.Swap(&b);
  }
  inline void Swap(FromServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FromServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FromServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FromServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FromServer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FromServer& from) {
    FromServer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FromServer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Logging.Proto.FromServer";
  }
  protected:
  explicit FromServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 1,
  };
  // repeated .Jde.Logging.Proto.FromServerUnion Messages = 1;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  ::Jde::Logging::Proto::FromServerUnion* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Logging::Proto::FromServerUnion >*
      mutable_messages();
  private:
  const ::Jde::Logging::Proto::FromServerUnion& _internal_messages(int index) const;
  ::Jde::Logging::Proto::FromServerUnion* _internal_add_messages();
  public:
  const ::Jde::Logging::Proto::FromServerUnion& messages(int index) const;
  ::Jde::Logging::Proto::FromServerUnion* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Logging::Proto::FromServerUnion >&
      messages() const;

  // @@protoc_insertion_point(class_scope:Jde.Logging.Proto.FromServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Logging::Proto::FromServerUnion > messages_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Instance

// string application = 1;
inline void Instance::clear_application() {
  _impl_.application_.ClearToEmpty();
}
inline const std::string& Instance::application() const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.Instance.application)
  return _internal_application();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Instance::set_application(ArgT0&& arg0, ArgT... args) {

 _impl_.application_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Logging.Proto.Instance.application)
}
inline std::string* Instance::mutable_application() {
  std::string* _s = _internal_mutable_application();
  // @@protoc_insertion_point(field_mutable:Jde.Logging.Proto.Instance.application)
  return _s;
}
inline const std::string& Instance::_internal_application() const {
  return _impl_.application_.Get();
}
inline void Instance::_internal_set_application(const std::string& value) {

  _impl_.application_.Set(value, GetArenaForAllocation());
}
inline std::string* Instance::_internal_mutable_application() {

  return _impl_.application_.Mutable(GetArenaForAllocation());
}
inline std::string* Instance::release_application() {
  // @@protoc_insertion_point(field_release:Jde.Logging.Proto.Instance.application)
  return _impl_.application_.Release();
}
inline void Instance::set_allocated_application(std::string* application) {
  if (application != nullptr) {

  } else {

  }
  _impl_.application_.SetAllocated(application, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.application_.IsDefault()) {
    _impl_.application_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Jde.Logging.Proto.Instance.application)
}

// string host = 2;
inline void Instance::clear_host() {
  _impl_.host_.ClearToEmpty();
}
inline const std::string& Instance::host() const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.Instance.host)
  return _internal_host();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Instance::set_host(ArgT0&& arg0, ArgT... args) {

 _impl_.host_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Logging.Proto.Instance.host)
}
inline std::string* Instance::mutable_host() {
  std::string* _s = _internal_mutable_host();
  // @@protoc_insertion_point(field_mutable:Jde.Logging.Proto.Instance.host)
  return _s;
}
inline const std::string& Instance::_internal_host() const {
  return _impl_.host_.Get();
}
inline void Instance::_internal_set_host(const std::string& value) {

  _impl_.host_.Set(value, GetArenaForAllocation());
}
inline std::string* Instance::_internal_mutable_host() {

  return _impl_.host_.Mutable(GetArenaForAllocation());
}
inline std::string* Instance::release_host() {
  // @@protoc_insertion_point(field_release:Jde.Logging.Proto.Instance.host)
  return _impl_.host_.Release();
}
inline void Instance::set_allocated_host(std::string* host) {
  if (host != nullptr) {

  } else {

  }
  _impl_.host_.SetAllocated(host, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.host_.IsDefault()) {
    _impl_.host_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Jde.Logging.Proto.Instance.host)
}

// int32 pid = 3;
inline void Instance::clear_pid() {
  _impl_.pid_ = 0;
}
inline int32_t Instance::_internal_pid() const {
  return _impl_.pid_;
}
inline int32_t Instance::pid() const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.Instance.pid)
  return _internal_pid();
}
inline void Instance::_internal_set_pid(int32_t value) {

  _impl_.pid_ = value;
}
inline void Instance::set_pid(int32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:Jde.Logging.Proto.Instance.pid)
}

// .Jde.Logging.Proto.ELogLevel server_log_level = 4;
inline void Instance::clear_server_log_level() {
  _impl_.server_log_level_ = 0;
}
inline ::Jde::Logging::Proto::ELogLevel Instance::_internal_server_log_level() const {
  return static_cast< ::Jde::Logging::Proto::ELogLevel >(_impl_.server_log_level_);
}
inline ::Jde::Logging::Proto::ELogLevel Instance::server_log_level() const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.Instance.server_log_level)
  return _internal_server_log_level();
}
inline void Instance::_internal_set_server_log_level(::Jde::Logging::Proto::ELogLevel value) {

  _impl_.server_log_level_ = value;
}
inline void Instance::set_server_log_level(::Jde::Logging::Proto::ELogLevel value) {
  _internal_set_server_log_level(value);
  // @@protoc_insertion_point(field_set:Jde.Logging.Proto.Instance.server_log_level)
}

// .Jde.Logging.Proto.ELogLevel client_log_level = 5;
inline void Instance::clear_client_log_level() {
  _impl_.client_log_level_ = 0;
}
inline ::Jde::Logging::Proto::ELogLevel Instance::_internal_client_log_level() const {
  return static_cast< ::Jde::Logging::Proto::ELogLevel >(_impl_.client_log_level_);
}
inline ::Jde::Logging::Proto::ELogLevel Instance::client_log_level() const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.Instance.client_log_level)
  return _internal_client_log_level();
}
inline void Instance::_internal_set_client_log_level(::Jde::Logging::Proto::ELogLevel value) {

  _impl_.client_log_level_ = value;
}
inline void Instance::set_client_log_level(::Jde::Logging::Proto::ELogLevel value) {
  _internal_set_client_log_level(value);
  // @@protoc_insertion_point(field_set:Jde.Logging.Proto.Instance.client_log_level)
}

// uint32 start_time = 6;
inline void Instance::clear_start_time() {
  _impl_.start_time_ = 0u;
}
inline uint32_t Instance::_internal_start_time() const {
  return _impl_.start_time_;
}
inline uint32_t Instance::start_time() const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.Instance.start_time)
  return _internal_start_time();
}
inline void Instance::_internal_set_start_time(uint32_t value) {

  _impl_.start_time_ = value;
}
inline void Instance::set_start_time(uint32_t value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:Jde.Logging.Proto.Instance.start_time)
}

// -------------------------------------------------------------------

// Message

// .google.protobuf.Timestamp Time = 1;
inline bool Message::_internal_has_time() const {
  return this != internal_default_instance() && _impl_.time_ != nullptr;
}
inline bool Message::has_time() const {
  return _internal_has_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Message::_internal_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Message::time() const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.Message.Time)
  return _internal_time();
}
inline void Message::unsafe_arena_set_allocated_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = time;
  if (time) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Logging.Proto.Message.Time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Message::release_time() {

  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Message::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:Jde.Logging.Proto.Message.Time)

  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Message::_internal_mutable_time() {

  if (_impl_.time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.time_ = p;
  }
  return _impl_.time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Message::mutable_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:Jde.Logging.Proto.Message.Time)
  return _msg;
}
inline void Message::set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time));
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }

  } else {

  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_set_allocated:Jde.Logging.Proto.Message.Time)
}

// .Jde.Logging.Proto.ELogLevel Level = 2;
inline void Message::clear_level() {
  _impl_.level_ = 0;
}
inline ::Jde::Logging::Proto::ELogLevel Message::_internal_level() const {
  return static_cast< ::Jde::Logging::Proto::ELogLevel >(_impl_.level_);
}
inline ::Jde::Logging::Proto::ELogLevel Message::level() const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.Message.Level)
  return _internal_level();
}
inline void Message::_internal_set_level(::Jde::Logging::Proto::ELogLevel value) {

  _impl_.level_ = value;
}
inline void Message::set_level(::Jde::Logging::Proto::ELogLevel value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:Jde.Logging.Proto.Message.Level)
}

// uint32 MessageId = 3;
inline void Message::clear_messageid() {
  _impl_.messageid_ = 0u;
}
inline uint32_t Message::_internal_messageid() const {
  return _impl_.messageid_;
}
inline uint32_t Message::messageid() const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.Message.MessageId)
  return _internal_messageid();
}
inline void Message::_internal_set_messageid(uint32_t value) {

  _impl_.messageid_ = value;
}
inline void Message::set_messageid(uint32_t value) {
  _internal_set_messageid(value);
  // @@protoc_insertion_point(field_set:Jde.Logging.Proto.Message.MessageId)
}

// uint32 FileId = 4;
inline void Message::clear_fileid() {
  _impl_.fileid_ = 0u;
}
inline uint32_t Message::_internal_fileid() const {
  return _impl_.fileid_;
}
inline uint32_t Message::fileid() const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.Message.FileId)
  return _internal_fileid();
}
inline void Message::_internal_set_fileid(uint32_t value) {

  _impl_.fileid_ = value;
}
inline void Message::set_fileid(uint32_t value) {
  _internal_set_fileid(value);
  // @@protoc_insertion_point(field_set:Jde.Logging.Proto.Message.FileId)
}

// uint32 FunctionId = 5;
inline void Message::clear_functionid() {
  _impl_.functionid_ = 0u;
}
inline uint32_t Message::_internal_functionid() const {
  return _impl_.functionid_;
}
inline uint32_t Message::functionid() const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.Message.FunctionId)
  return _internal_functionid();
}
inline void Message::_internal_set_functionid(uint32_t value) {

  _impl_.functionid_ = value;
}
inline void Message::set_functionid(uint32_t value) {
  _internal_set_functionid(value);
  // @@protoc_insertion_point(field_set:Jde.Logging.Proto.Message.FunctionId)
}

// uint32 LineNumber = 6;
inline void Message::clear_linenumber() {
  _impl_.linenumber_ = 0u;
}
inline uint32_t Message::_internal_linenumber() const {
  return _impl_.linenumber_;
}
inline uint32_t Message::linenumber() const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.Message.LineNumber)
  return _internal_linenumber();
}
inline void Message::_internal_set_linenumber(uint32_t value) {

  _impl_.linenumber_ = value;
}
inline void Message::set_linenumber(uint32_t value) {
  _internal_set_linenumber(value);
  // @@protoc_insertion_point(field_set:Jde.Logging.Proto.Message.LineNumber)
}

// uint32 UserId = 7;
inline void Message::clear_userid() {
  _impl_.userid_ = 0u;
}
inline uint32_t Message::_internal_userid() const {
  return _impl_.userid_;
}
inline uint32_t Message::userid() const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.Message.UserId)
  return _internal_userid();
}
inline void Message::_internal_set_userid(uint32_t value) {

  _impl_.userid_ = value;
}
inline void Message::set_userid(uint32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:Jde.Logging.Proto.Message.UserId)
}

// uint64 ThreadId = 8;
inline void Message::clear_threadid() {
  _impl_.threadid_ = uint64_t{0u};
}
inline uint64_t Message::_internal_threadid() const {
  return _impl_.threadid_;
}
inline uint64_t Message::threadid() const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.Message.ThreadId)
  return _internal_threadid();
}
inline void Message::_internal_set_threadid(uint64_t value) {

  _impl_.threadid_ = value;
}
inline void Message::set_threadid(uint64_t value) {
  _internal_set_threadid(value);
  // @@protoc_insertion_point(field_set:Jde.Logging.Proto.Message.ThreadId)
}

// repeated string Variables = 9;
inline int Message::_internal_variables_size() const {
  return _impl_.variables_.size();
}
inline int Message::variables_size() const {
  return _internal_variables_size();
}
inline void Message::clear_variables() {
  _impl_.variables_.Clear();
}
inline std::string* Message::add_variables() {
  std::string* _s = _internal_add_variables();
  // @@protoc_insertion_point(field_add_mutable:Jde.Logging.Proto.Message.Variables)
  return _s;
}
inline const std::string& Message::_internal_variables(int index) const {
  return _impl_.variables_.Get(index);
}
inline const std::string& Message::variables(int index) const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.Message.Variables)
  return _internal_variables(index);
}
inline std::string* Message::mutable_variables(int index) {
  // @@protoc_insertion_point(field_mutable:Jde.Logging.Proto.Message.Variables)
  return _impl_.variables_.Mutable(index);
}
inline void Message::set_variables(int index, const std::string& value) {
  _impl_.variables_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Jde.Logging.Proto.Message.Variables)
}
inline void Message::set_variables(int index, std::string&& value) {
  _impl_.variables_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Jde.Logging.Proto.Message.Variables)
}
inline void Message::set_variables(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.variables_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Jde.Logging.Proto.Message.Variables)
}
inline void Message::set_variables(int index, const char* value, size_t size) {
  _impl_.variables_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Jde.Logging.Proto.Message.Variables)
}
inline std::string* Message::_internal_add_variables() {
  return _impl_.variables_.Add();
}
inline void Message::add_variables(const std::string& value) {
  _impl_.variables_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Jde.Logging.Proto.Message.Variables)
}
inline void Message::add_variables(std::string&& value) {
  _impl_.variables_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Jde.Logging.Proto.Message.Variables)
}
inline void Message::add_variables(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.variables_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Jde.Logging.Proto.Message.Variables)
}
inline void Message::add_variables(const char* value, size_t size) {
  _impl_.variables_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Jde.Logging.Proto.Message.Variables)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Message::variables() const {
  // @@protoc_insertion_point(field_list:Jde.Logging.Proto.Message.Variables)
  return _impl_.variables_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Message::mutable_variables() {
  // @@protoc_insertion_point(field_mutable_list:Jde.Logging.Proto.Message.Variables)
  return &_impl_.variables_;
}

// -------------------------------------------------------------------

// SessionInfo

// .google.protobuf.Timestamp expiration = 1;
inline bool SessionInfo::_internal_has_expiration() const {
  return this != internal_default_instance() && _impl_.expiration_ != nullptr;
}
inline bool SessionInfo::has_expiration() const {
  return _internal_has_expiration();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SessionInfo::_internal_expiration() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.expiration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SessionInfo::expiration() const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.SessionInfo.expiration)
  return _internal_expiration();
}
inline void SessionInfo::unsafe_arena_set_allocated_expiration(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* expiration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expiration_);
  }
  _impl_.expiration_ = expiration;
  if (expiration) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Logging.Proto.SessionInfo.expiration)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SessionInfo::release_expiration() {

  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.expiration_;
  _impl_.expiration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SessionInfo::unsafe_arena_release_expiration() {
  // @@protoc_insertion_point(field_release:Jde.Logging.Proto.SessionInfo.expiration)

  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.expiration_;
  _impl_.expiration_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SessionInfo::_internal_mutable_expiration() {

  if (_impl_.expiration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.expiration_ = p;
  }
  return _impl_.expiration_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SessionInfo::mutable_expiration() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_expiration();
  // @@protoc_insertion_point(field_mutable:Jde.Logging.Proto.SessionInfo.expiration)
  return _msg;
}
inline void SessionInfo::set_allocated_expiration(::PROTOBUF_NAMESPACE_ID::Timestamp* expiration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expiration_);
  }
  if (expiration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiration));
    if (message_arena != submessage_arena) {
      expiration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expiration, submessage_arena);
    }

  } else {

  }
  _impl_.expiration_ = expiration;
  // @@protoc_insertion_point(field_set_allocated:Jde.Logging.Proto.SessionInfo.expiration)
}

// uint32 session_id = 2;
inline void SessionInfo::clear_session_id() {
  _impl_.session_id_ = 0u;
}
inline uint32_t SessionInfo::_internal_session_id() const {
  return _impl_.session_id_;
}
inline uint32_t SessionInfo::session_id() const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.SessionInfo.session_id)
  return _internal_session_id();
}
inline void SessionInfo::_internal_set_session_id(uint32_t value) {

  _impl_.session_id_ = value;
}
inline void SessionInfo::set_session_id(uint32_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:Jde.Logging.Proto.SessionInfo.session_id)
}

// uint32 user_id = 3;
inline void SessionInfo::clear_user_id() {
  _impl_.user_id_ = 0u;
}
inline uint32_t SessionInfo::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint32_t SessionInfo::user_id() const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.SessionInfo.user_id)
  return _internal_user_id();
}
inline void SessionInfo::_internal_set_user_id(uint32_t value) {

  _impl_.user_id_ = value;
}
inline void SessionInfo::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Jde.Logging.Proto.SessionInfo.user_id)
}

// -------------------------------------------------------------------

// RequestString

// .Jde.Logging.Proto.EFields Field = 1;
inline void RequestString::clear_field() {
  _impl_.field_ = 0;
}
inline ::Jde::Logging::Proto::EFields RequestString::_internal_field() const {
  return static_cast< ::Jde::Logging::Proto::EFields >(_impl_.field_);
}
inline ::Jde::Logging::Proto::EFields RequestString::field() const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.RequestString.Field)
  return _internal_field();
}
inline void RequestString::_internal_set_field(::Jde::Logging::Proto::EFields value) {

  _impl_.field_ = value;
}
inline void RequestString::set_field(::Jde::Logging::Proto::EFields value) {
  _internal_set_field(value);
  // @@protoc_insertion_point(field_set:Jde.Logging.Proto.RequestString.Field)
}

// uint32 Id = 2;
inline void RequestString::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t RequestString::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t RequestString::id() const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.RequestString.Id)
  return _internal_id();
}
inline void RequestString::_internal_set_id(uint32_t value) {

  _impl_.id_ = value;
}
inline void RequestString::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Jde.Logging.Proto.RequestString.Id)
}

// string Value = 3;
inline void RequestString::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& RequestString::value() const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.RequestString.Value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestString::set_value(ArgT0&& arg0, ArgT... args) {

 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Logging.Proto.RequestString.Value)
}
inline std::string* RequestString::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:Jde.Logging.Proto.RequestString.Value)
  return _s;
}
inline const std::string& RequestString::_internal_value() const {
  return _impl_.value_.Get();
}
inline void RequestString::_internal_set_value(const std::string& value) {

  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* RequestString::_internal_mutable_value() {

  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* RequestString::release_value() {
  // @@protoc_insertion_point(field_release:Jde.Logging.Proto.RequestString.Value)
  return _impl_.value_.Release();
}
inline void RequestString::set_allocated_value(std::string* value) {
  if (value != nullptr) {

  } else {

  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Jde.Logging.Proto.RequestString.Value)
}

// -------------------------------------------------------------------

// Status

// uint32 StartTime = 1;
inline void Status::clear_starttime() {
  _impl_.starttime_ = 0u;
}
inline uint32_t Status::_internal_starttime() const {
  return _impl_.starttime_;
}
inline uint32_t Status::starttime() const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.Status.StartTime)
  return _internal_starttime();
}
inline void Status::_internal_set_starttime(uint32_t value) {

  _impl_.starttime_ = value;
}
inline void Status::set_starttime(uint32_t value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:Jde.Logging.Proto.Status.StartTime)
}

// uint64 Memory = 2;
inline void Status::clear_memory() {
  _impl_.memory_ = uint64_t{0u};
}
inline uint64_t Status::_internal_memory() const {
  return _impl_.memory_;
}
inline uint64_t Status::memory() const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.Status.Memory)
  return _internal_memory();
}
inline void Status::_internal_set_memory(uint64_t value) {

  _impl_.memory_ = value;
}
inline void Status::set_memory(uint64_t value) {
  _internal_set_memory(value);
  // @@protoc_insertion_point(field_set:Jde.Logging.Proto.Status.Memory)
}

// .Jde.Logging.Proto.ELogLevel ServerLogLevel = 3;
inline void Status::clear_serverloglevel() {
  _impl_.serverloglevel_ = 0;
}
inline ::Jde::Logging::Proto::ELogLevel Status::_internal_serverloglevel() const {
  return static_cast< ::Jde::Logging::Proto::ELogLevel >(_impl_.serverloglevel_);
}
inline ::Jde::Logging::Proto::ELogLevel Status::serverloglevel() const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.Status.ServerLogLevel)
  return _internal_serverloglevel();
}
inline void Status::_internal_set_serverloglevel(::Jde::Logging::Proto::ELogLevel value) {

  _impl_.serverloglevel_ = value;
}
inline void Status::set_serverloglevel(::Jde::Logging::Proto::ELogLevel value) {
  _internal_set_serverloglevel(value);
  // @@protoc_insertion_point(field_set:Jde.Logging.Proto.Status.ServerLogLevel)
}

// .Jde.Logging.Proto.ELogLevel ClientLogLevel = 4;
inline void Status::clear_clientloglevel() {
  _impl_.clientloglevel_ = 0;
}
inline ::Jde::Logging::Proto::ELogLevel Status::_internal_clientloglevel() const {
  return static_cast< ::Jde::Logging::Proto::ELogLevel >(_impl_.clientloglevel_);
}
inline ::Jde::Logging::Proto::ELogLevel Status::clientloglevel() const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.Status.ClientLogLevel)
  return _internal_clientloglevel();
}
inline void Status::_internal_set_clientloglevel(::Jde::Logging::Proto::ELogLevel value) {

  _impl_.clientloglevel_ = value;
}
inline void Status::set_clientloglevel(::Jde::Logging::Proto::ELogLevel value) {
  _internal_set_clientloglevel(value);
  // @@protoc_insertion_point(field_set:Jde.Logging.Proto.Status.ClientLogLevel)
}

// repeated string Details = 5;
inline int Status::_internal_details_size() const {
  return _impl_.details_.size();
}
inline int Status::details_size() const {
  return _internal_details_size();
}
inline void Status::clear_details() {
  _impl_.details_.Clear();
}
inline std::string* Status::add_details() {
  std::string* _s = _internal_add_details();
  // @@protoc_insertion_point(field_add_mutable:Jde.Logging.Proto.Status.Details)
  return _s;
}
inline const std::string& Status::_internal_details(int index) const {
  return _impl_.details_.Get(index);
}
inline const std::string& Status::details(int index) const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.Status.Details)
  return _internal_details(index);
}
inline std::string* Status::mutable_details(int index) {
  // @@protoc_insertion_point(field_mutable:Jde.Logging.Proto.Status.Details)
  return _impl_.details_.Mutable(index);
}
inline void Status::set_details(int index, const std::string& value) {
  _impl_.details_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Jde.Logging.Proto.Status.Details)
}
inline void Status::set_details(int index, std::string&& value) {
  _impl_.details_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Jde.Logging.Proto.Status.Details)
}
inline void Status::set_details(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.details_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Jde.Logging.Proto.Status.Details)
}
inline void Status::set_details(int index, const char* value, size_t size) {
  _impl_.details_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Jde.Logging.Proto.Status.Details)
}
inline std::string* Status::_internal_add_details() {
  return _impl_.details_.Add();
}
inline void Status::add_details(const std::string& value) {
  _impl_.details_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Jde.Logging.Proto.Status.Details)
}
inline void Status::add_details(std::string&& value) {
  _impl_.details_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Jde.Logging.Proto.Status.Details)
}
inline void Status::add_details(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.details_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Jde.Logging.Proto.Status.Details)
}
inline void Status::add_details(const char* value, size_t size) {
  _impl_.details_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Jde.Logging.Proto.Status.Details)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Status::details() const {
  // @@protoc_insertion_point(field_list:Jde.Logging.Proto.Status.Details)
  return _impl_.details_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Status::mutable_details() {
  // @@protoc_insertion_point(field_mutable_list:Jde.Logging.Proto.Status.Details)
  return &_impl_.details_;
}

// -------------------------------------------------------------------

// CustomMessage

// uint32 RequestId = 1;
inline void CustomMessage::clear_requestid() {
  _impl_.requestid_ = 0u;
}
inline uint32_t CustomMessage::_internal_requestid() const {
  return _impl_.requestid_;
}
inline uint32_t CustomMessage::requestid() const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.CustomMessage.RequestId)
  return _internal_requestid();
}
inline void CustomMessage::_internal_set_requestid(uint32_t value) {

  _impl_.requestid_ = value;
}
inline void CustomMessage::set_requestid(uint32_t value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:Jde.Logging.Proto.CustomMessage.RequestId)
}

// bytes Message = 2;
inline void CustomMessage::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& CustomMessage::message() const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.CustomMessage.Message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustomMessage::set_message(ArgT0&& arg0, ArgT... args) {

 _impl_.message_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Logging.Proto.CustomMessage.Message)
}
inline std::string* CustomMessage::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:Jde.Logging.Proto.CustomMessage.Message)
  return _s;
}
inline const std::string& CustomMessage::_internal_message() const {
  return _impl_.message_.Get();
}
inline void CustomMessage::_internal_set_message(const std::string& value) {

  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* CustomMessage::_internal_mutable_message() {

  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* CustomMessage::release_message() {
  // @@protoc_insertion_point(field_release:Jde.Logging.Proto.CustomMessage.Message)
  return _impl_.message_.Release();
}
inline void CustomMessage::set_allocated_message(std::string* message) {
  if (message != nullptr) {

  } else {

  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Jde.Logging.Proto.CustomMessage.Message)
}

// -------------------------------------------------------------------

// CustomComplete

// uint32 RequestId = 1;
inline void CustomComplete::clear_requestid() {
  _impl_.requestid_ = 0u;
}
inline uint32_t CustomComplete::_internal_requestid() const {
  return _impl_.requestid_;
}
inline uint32_t CustomComplete::requestid() const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.CustomComplete.RequestId)
  return _internal_requestid();
}
inline void CustomComplete::_internal_set_requestid(uint32_t value) {

  _impl_.requestid_ = value;
}
inline void CustomComplete::set_requestid(uint32_t value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:Jde.Logging.Proto.CustomComplete.RequestId)
}

// -------------------------------------------------------------------

// RequestSessionInfo

// uint32 session_id = 1;
inline void RequestSessionInfo::clear_session_id() {
  _impl_.session_id_ = 0u;
}
inline uint32_t RequestSessionInfo::_internal_session_id() const {
  return _impl_.session_id_;
}
inline uint32_t RequestSessionInfo::session_id() const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.RequestSessionInfo.session_id)
  return _internal_session_id();
}
inline void RequestSessionInfo::_internal_set_session_id(uint32_t value) {

  _impl_.session_id_ = value;
}
inline void RequestSessionInfo::set_session_id(uint32_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:Jde.Logging.Proto.RequestSessionInfo.session_id)
}

// -------------------------------------------------------------------

// ToServerUnion

// .Jde.Logging.Proto.Instance Instance = 1;
inline bool ToServerUnion::_internal_has_instance() const {
  return Value_case() == kInstance;
}
inline bool ToServerUnion::has_instance() const {
  return _internal_has_instance();
}
inline void ToServerUnion::set_has_instance() {
  _impl_._oneof_case_[0] = kInstance;
}
inline void ToServerUnion::clear_instance() {
  if (_internal_has_instance()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Value_.instance_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Logging::Proto::Instance* ToServerUnion::release_instance() {
  // @@protoc_insertion_point(field_release:Jde.Logging.Proto.ToServerUnion.Instance)
  if (_internal_has_instance()) {
    clear_has_Value();
    ::Jde::Logging::Proto::Instance* temp = _impl_.Value_.instance_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Value_.instance_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Logging::Proto::Instance& ToServerUnion::_internal_instance() const {
  return _internal_has_instance()
      ? *_impl_.Value_.instance_
      : reinterpret_cast< ::Jde::Logging::Proto::Instance&>(::Jde::Logging::Proto::_Instance_default_instance_);
}
inline const ::Jde::Logging::Proto::Instance& ToServerUnion::instance() const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.ToServerUnion.Instance)
  return _internal_instance();
}
inline ::Jde::Logging::Proto::Instance* ToServerUnion::unsafe_arena_release_instance() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Logging.Proto.ToServerUnion.Instance)
  if (_internal_has_instance()) {
    clear_has_Value();
    ::Jde::Logging::Proto::Instance* temp = _impl_.Value_.instance_;
    _impl_.Value_.instance_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ToServerUnion::unsafe_arena_set_allocated_instance(::Jde::Logging::Proto::Instance* instance) {
  clear_Value();
  if (instance) {
    set_has_instance();
    _impl_.Value_.instance_ = instance;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Logging.Proto.ToServerUnion.Instance)
}
inline ::Jde::Logging::Proto::Instance* ToServerUnion::_internal_mutable_instance() {
  if (!_internal_has_instance()) {
    clear_Value();
    set_has_instance();
    _impl_.Value_.instance_ = CreateMaybeMessage< ::Jde::Logging::Proto::Instance >(GetArenaForAllocation());
  }
  return _impl_.Value_.instance_;
}
inline ::Jde::Logging::Proto::Instance* ToServerUnion::mutable_instance() {
  ::Jde::Logging::Proto::Instance* _msg = _internal_mutable_instance();
  // @@protoc_insertion_point(field_mutable:Jde.Logging.Proto.ToServerUnion.Instance)
  return _msg;
}

// .Jde.Logging.Proto.Message Message = 2;
inline bool ToServerUnion::_internal_has_message() const {
  return Value_case() == kMessage;
}
inline bool ToServerUnion::has_message() const {
  return _internal_has_message();
}
inline void ToServerUnion::set_has_message() {
  _impl_._oneof_case_[0] = kMessage;
}
inline void ToServerUnion::clear_message() {
  if (_internal_has_message()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Value_.message_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Logging::Proto::Message* ToServerUnion::release_message() {
  // @@protoc_insertion_point(field_release:Jde.Logging.Proto.ToServerUnion.Message)
  if (_internal_has_message()) {
    clear_has_Value();
    ::Jde::Logging::Proto::Message* temp = _impl_.Value_.message_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Value_.message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Logging::Proto::Message& ToServerUnion::_internal_message() const {
  return _internal_has_message()
      ? *_impl_.Value_.message_
      : reinterpret_cast< ::Jde::Logging::Proto::Message&>(::Jde::Logging::Proto::_Message_default_instance_);
}
inline const ::Jde::Logging::Proto::Message& ToServerUnion::message() const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.ToServerUnion.Message)
  return _internal_message();
}
inline ::Jde::Logging::Proto::Message* ToServerUnion::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Logging.Proto.ToServerUnion.Message)
  if (_internal_has_message()) {
    clear_has_Value();
    ::Jde::Logging::Proto::Message* temp = _impl_.Value_.message_;
    _impl_.Value_.message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ToServerUnion::unsafe_arena_set_allocated_message(::Jde::Logging::Proto::Message* message) {
  clear_Value();
  if (message) {
    set_has_message();
    _impl_.Value_.message_ = message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Logging.Proto.ToServerUnion.Message)
}
inline ::Jde::Logging::Proto::Message* ToServerUnion::_internal_mutable_message() {
  if (!_internal_has_message()) {
    clear_Value();
    set_has_message();
    _impl_.Value_.message_ = CreateMaybeMessage< ::Jde::Logging::Proto::Message >(GetArenaForAllocation());
  }
  return _impl_.Value_.message_;
}
inline ::Jde::Logging::Proto::Message* ToServerUnion::mutable_message() {
  ::Jde::Logging::Proto::Message* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:Jde.Logging.Proto.ToServerUnion.Message)
  return _msg;
}

// .Jde.Logging.Proto.RequestString String = 3;
inline bool ToServerUnion::_internal_has_string() const {
  return Value_case() == kString;
}
inline bool ToServerUnion::has_string() const {
  return _internal_has_string();
}
inline void ToServerUnion::set_has_string() {
  _impl_._oneof_case_[0] = kString;
}
inline void ToServerUnion::clear_string() {
  if (_internal_has_string()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Value_.string_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Logging::Proto::RequestString* ToServerUnion::release_string() {
  // @@protoc_insertion_point(field_release:Jde.Logging.Proto.ToServerUnion.String)
  if (_internal_has_string()) {
    clear_has_Value();
    ::Jde::Logging::Proto::RequestString* temp = _impl_.Value_.string_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Value_.string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Logging::Proto::RequestString& ToServerUnion::_internal_string() const {
  return _internal_has_string()
      ? *_impl_.Value_.string_
      : reinterpret_cast< ::Jde::Logging::Proto::RequestString&>(::Jde::Logging::Proto::_RequestString_default_instance_);
}
inline const ::Jde::Logging::Proto::RequestString& ToServerUnion::string() const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.ToServerUnion.String)
  return _internal_string();
}
inline ::Jde::Logging::Proto::RequestString* ToServerUnion::unsafe_arena_release_string() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Logging.Proto.ToServerUnion.String)
  if (_internal_has_string()) {
    clear_has_Value();
    ::Jde::Logging::Proto::RequestString* temp = _impl_.Value_.string_;
    _impl_.Value_.string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ToServerUnion::unsafe_arena_set_allocated_string(::Jde::Logging::Proto::RequestString* string) {
  clear_Value();
  if (string) {
    set_has_string();
    _impl_.Value_.string_ = string;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Logging.Proto.ToServerUnion.String)
}
inline ::Jde::Logging::Proto::RequestString* ToServerUnion::_internal_mutable_string() {
  if (!_internal_has_string()) {
    clear_Value();
    set_has_string();
    _impl_.Value_.string_ = CreateMaybeMessage< ::Jde::Logging::Proto::RequestString >(GetArenaForAllocation());
  }
  return _impl_.Value_.string_;
}
inline ::Jde::Logging::Proto::RequestString* ToServerUnion::mutable_string() {
  ::Jde::Logging::Proto::RequestString* _msg = _internal_mutable_string();
  // @@protoc_insertion_point(field_mutable:Jde.Logging.Proto.ToServerUnion.String)
  return _msg;
}

// .Jde.Logging.Proto.Status Status = 4;
inline bool ToServerUnion::_internal_has_status() const {
  return Value_case() == kStatus;
}
inline bool ToServerUnion::has_status() const {
  return _internal_has_status();
}
inline void ToServerUnion::set_has_status() {
  _impl_._oneof_case_[0] = kStatus;
}
inline void ToServerUnion::clear_status() {
  if (_internal_has_status()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Value_.status_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Logging::Proto::Status* ToServerUnion::release_status() {
  // @@protoc_insertion_point(field_release:Jde.Logging.Proto.ToServerUnion.Status)
  if (_internal_has_status()) {
    clear_has_Value();
    ::Jde::Logging::Proto::Status* temp = _impl_.Value_.status_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Value_.status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Logging::Proto::Status& ToServerUnion::_internal_status() const {
  return _internal_has_status()
      ? *_impl_.Value_.status_
      : reinterpret_cast< ::Jde::Logging::Proto::Status&>(::Jde::Logging::Proto::_Status_default_instance_);
}
inline const ::Jde::Logging::Proto::Status& ToServerUnion::status() const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.ToServerUnion.Status)
  return _internal_status();
}
inline ::Jde::Logging::Proto::Status* ToServerUnion::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Logging.Proto.ToServerUnion.Status)
  if (_internal_has_status()) {
    clear_has_Value();
    ::Jde::Logging::Proto::Status* temp = _impl_.Value_.status_;
    _impl_.Value_.status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ToServerUnion::unsafe_arena_set_allocated_status(::Jde::Logging::Proto::Status* status) {
  clear_Value();
  if (status) {
    set_has_status();
    _impl_.Value_.status_ = status;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Logging.Proto.ToServerUnion.Status)
}
inline ::Jde::Logging::Proto::Status* ToServerUnion::_internal_mutable_status() {
  if (!_internal_has_status()) {
    clear_Value();
    set_has_status();
    _impl_.Value_.status_ = CreateMaybeMessage< ::Jde::Logging::Proto::Status >(GetArenaForAllocation());
  }
  return _impl_.Value_.status_;
}
inline ::Jde::Logging::Proto::Status* ToServerUnion::mutable_status() {
  ::Jde::Logging::Proto::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:Jde.Logging.Proto.ToServerUnion.Status)
  return _msg;
}

// .Jde.Logging.Proto.CustomMessage Custom = 5;
inline bool ToServerUnion::_internal_has_custom() const {
  return Value_case() == kCustom;
}
inline bool ToServerUnion::has_custom() const {
  return _internal_has_custom();
}
inline void ToServerUnion::set_has_custom() {
  _impl_._oneof_case_[0] = kCustom;
}
inline void ToServerUnion::clear_custom() {
  if (_internal_has_custom()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Value_.custom_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Logging::Proto::CustomMessage* ToServerUnion::release_custom() {
  // @@protoc_insertion_point(field_release:Jde.Logging.Proto.ToServerUnion.Custom)
  if (_internal_has_custom()) {
    clear_has_Value();
    ::Jde::Logging::Proto::CustomMessage* temp = _impl_.Value_.custom_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Value_.custom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Logging::Proto::CustomMessage& ToServerUnion::_internal_custom() const {
  return _internal_has_custom()
      ? *_impl_.Value_.custom_
      : reinterpret_cast< ::Jde::Logging::Proto::CustomMessage&>(::Jde::Logging::Proto::_CustomMessage_default_instance_);
}
inline const ::Jde::Logging::Proto::CustomMessage& ToServerUnion::custom() const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.ToServerUnion.Custom)
  return _internal_custom();
}
inline ::Jde::Logging::Proto::CustomMessage* ToServerUnion::unsafe_arena_release_custom() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Logging.Proto.ToServerUnion.Custom)
  if (_internal_has_custom()) {
    clear_has_Value();
    ::Jde::Logging::Proto::CustomMessage* temp = _impl_.Value_.custom_;
    _impl_.Value_.custom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ToServerUnion::unsafe_arena_set_allocated_custom(::Jde::Logging::Proto::CustomMessage* custom) {
  clear_Value();
  if (custom) {
    set_has_custom();
    _impl_.Value_.custom_ = custom;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Logging.Proto.ToServerUnion.Custom)
}
inline ::Jde::Logging::Proto::CustomMessage* ToServerUnion::_internal_mutable_custom() {
  if (!_internal_has_custom()) {
    clear_Value();
    set_has_custom();
    _impl_.Value_.custom_ = CreateMaybeMessage< ::Jde::Logging::Proto::CustomMessage >(GetArenaForAllocation());
  }
  return _impl_.Value_.custom_;
}
inline ::Jde::Logging::Proto::CustomMessage* ToServerUnion::mutable_custom() {
  ::Jde::Logging::Proto::CustomMessage* _msg = _internal_mutable_custom();
  // @@protoc_insertion_point(field_mutable:Jde.Logging.Proto.ToServerUnion.Custom)
  return _msg;
}

// .Jde.Logging.Proto.CustomComplete Complete = 6;
inline bool ToServerUnion::_internal_has_complete() const {
  return Value_case() == kComplete;
}
inline bool ToServerUnion::has_complete() const {
  return _internal_has_complete();
}
inline void ToServerUnion::set_has_complete() {
  _impl_._oneof_case_[0] = kComplete;
}
inline void ToServerUnion::clear_complete() {
  if (_internal_has_complete()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Value_.complete_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Logging::Proto::CustomComplete* ToServerUnion::release_complete() {
  // @@protoc_insertion_point(field_release:Jde.Logging.Proto.ToServerUnion.Complete)
  if (_internal_has_complete()) {
    clear_has_Value();
    ::Jde::Logging::Proto::CustomComplete* temp = _impl_.Value_.complete_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Value_.complete_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Logging::Proto::CustomComplete& ToServerUnion::_internal_complete() const {
  return _internal_has_complete()
      ? *_impl_.Value_.complete_
      : reinterpret_cast< ::Jde::Logging::Proto::CustomComplete&>(::Jde::Logging::Proto::_CustomComplete_default_instance_);
}
inline const ::Jde::Logging::Proto::CustomComplete& ToServerUnion::complete() const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.ToServerUnion.Complete)
  return _internal_complete();
}
inline ::Jde::Logging::Proto::CustomComplete* ToServerUnion::unsafe_arena_release_complete() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Logging.Proto.ToServerUnion.Complete)
  if (_internal_has_complete()) {
    clear_has_Value();
    ::Jde::Logging::Proto::CustomComplete* temp = _impl_.Value_.complete_;
    _impl_.Value_.complete_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ToServerUnion::unsafe_arena_set_allocated_complete(::Jde::Logging::Proto::CustomComplete* complete) {
  clear_Value();
  if (complete) {
    set_has_complete();
    _impl_.Value_.complete_ = complete;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Logging.Proto.ToServerUnion.Complete)
}
inline ::Jde::Logging::Proto::CustomComplete* ToServerUnion::_internal_mutable_complete() {
  if (!_internal_has_complete()) {
    clear_Value();
    set_has_complete();
    _impl_.Value_.complete_ = CreateMaybeMessage< ::Jde::Logging::Proto::CustomComplete >(GetArenaForAllocation());
  }
  return _impl_.Value_.complete_;
}
inline ::Jde::Logging::Proto::CustomComplete* ToServerUnion::mutable_complete() {
  ::Jde::Logging::Proto::CustomComplete* _msg = _internal_mutable_complete();
  // @@protoc_insertion_point(field_mutable:Jde.Logging.Proto.ToServerUnion.Complete)
  return _msg;
}

// .Jde.Logging.Proto.RequestSessionInfo session_info = 7;
inline bool ToServerUnion::_internal_has_session_info() const {
  return Value_case() == kSessionInfo;
}
inline bool ToServerUnion::has_session_info() const {
  return _internal_has_session_info();
}
inline void ToServerUnion::set_has_session_info() {
  _impl_._oneof_case_[0] = kSessionInfo;
}
inline void ToServerUnion::clear_session_info() {
  if (_internal_has_session_info()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Value_.session_info_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Logging::Proto::RequestSessionInfo* ToServerUnion::release_session_info() {
  // @@protoc_insertion_point(field_release:Jde.Logging.Proto.ToServerUnion.session_info)
  if (_internal_has_session_info()) {
    clear_has_Value();
    ::Jde::Logging::Proto::RequestSessionInfo* temp = _impl_.Value_.session_info_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Value_.session_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Logging::Proto::RequestSessionInfo& ToServerUnion::_internal_session_info() const {
  return _internal_has_session_info()
      ? *_impl_.Value_.session_info_
      : reinterpret_cast< ::Jde::Logging::Proto::RequestSessionInfo&>(::Jde::Logging::Proto::_RequestSessionInfo_default_instance_);
}
inline const ::Jde::Logging::Proto::RequestSessionInfo& ToServerUnion::session_info() const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.ToServerUnion.session_info)
  return _internal_session_info();
}
inline ::Jde::Logging::Proto::RequestSessionInfo* ToServerUnion::unsafe_arena_release_session_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Logging.Proto.ToServerUnion.session_info)
  if (_internal_has_session_info()) {
    clear_has_Value();
    ::Jde::Logging::Proto::RequestSessionInfo* temp = _impl_.Value_.session_info_;
    _impl_.Value_.session_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ToServerUnion::unsafe_arena_set_allocated_session_info(::Jde::Logging::Proto::RequestSessionInfo* session_info) {
  clear_Value();
  if (session_info) {
    set_has_session_info();
    _impl_.Value_.session_info_ = session_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Logging.Proto.ToServerUnion.session_info)
}
inline ::Jde::Logging::Proto::RequestSessionInfo* ToServerUnion::_internal_mutable_session_info() {
  if (!_internal_has_session_info()) {
    clear_Value();
    set_has_session_info();
    _impl_.Value_.session_info_ = CreateMaybeMessage< ::Jde::Logging::Proto::RequestSessionInfo >(GetArenaForAllocation());
  }
  return _impl_.Value_.session_info_;
}
inline ::Jde::Logging::Proto::RequestSessionInfo* ToServerUnion::mutable_session_info() {
  ::Jde::Logging::Proto::RequestSessionInfo* _msg = _internal_mutable_session_info();
  // @@protoc_insertion_point(field_mutable:Jde.Logging.Proto.ToServerUnion.session_info)
  return _msg;
}

inline bool ToServerUnion::has_Value() const {
  return Value_case() != VALUE_NOT_SET;
}
inline void ToServerUnion::clear_has_Value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline ToServerUnion::ValueCase ToServerUnion::Value_case() const {
  return ToServerUnion::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ToServer

// repeated .Jde.Logging.Proto.ToServerUnion Messages = 1;
inline int ToServer::_internal_messages_size() const {
  return _impl_.messages_.size();
}
inline int ToServer::messages_size() const {
  return _internal_messages_size();
}
inline void ToServer::clear_messages() {
  _impl_.messages_.Clear();
}
inline ::Jde::Logging::Proto::ToServerUnion* ToServer::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:Jde.Logging.Proto.ToServer.Messages)
  return _impl_.messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Logging::Proto::ToServerUnion >*
ToServer::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:Jde.Logging.Proto.ToServer.Messages)
  return &_impl_.messages_;
}
inline const ::Jde::Logging::Proto::ToServerUnion& ToServer::_internal_messages(int index) const {
  return _impl_.messages_.Get(index);
}
inline const ::Jde::Logging::Proto::ToServerUnion& ToServer::messages(int index) const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.ToServer.Messages)
  return _internal_messages(index);
}
inline ::Jde::Logging::Proto::ToServerUnion* ToServer::_internal_add_messages() {
  return _impl_.messages_.Add();
}
inline ::Jde::Logging::Proto::ToServerUnion* ToServer::add_messages() {
  ::Jde::Logging::Proto::ToServerUnion* _add = _internal_add_messages();
  // @@protoc_insertion_point(field_add:Jde.Logging.Proto.ToServer.Messages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Logging::Proto::ToServerUnion >&
ToServer::messages() const {
  // @@protoc_insertion_point(field_list:Jde.Logging.Proto.ToServer.Messages)
  return _impl_.messages_;
}

// -------------------------------------------------------------------

// Acknowledgement

// uint32 InstanceId = 1;
inline void Acknowledgement::clear_instanceid() {
  _impl_.instanceid_ = 0u;
}
inline uint32_t Acknowledgement::_internal_instanceid() const {
  return _impl_.instanceid_;
}
inline uint32_t Acknowledgement::instanceid() const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.Acknowledgement.InstanceId)
  return _internal_instanceid();
}
inline void Acknowledgement::_internal_set_instanceid(uint32_t value) {

  _impl_.instanceid_ = value;
}
inline void Acknowledgement::set_instanceid(uint32_t value) {
  _internal_set_instanceid(value);
  // @@protoc_insertion_point(field_set:Jde.Logging.Proto.Acknowledgement.InstanceId)
}

// -------------------------------------------------------------------

// GenericFromServer

// .Jde.Logging.Proto.EFromServer What = 1;
inline void GenericFromServer::clear_what() {
  _impl_.what_ = 0;
}
inline ::Jde::Logging::Proto::EFromServer GenericFromServer::_internal_what() const {
  return static_cast< ::Jde::Logging::Proto::EFromServer >(_impl_.what_);
}
inline ::Jde::Logging::Proto::EFromServer GenericFromServer::what() const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.GenericFromServer.What)
  return _internal_what();
}
inline void GenericFromServer::_internal_set_what(::Jde::Logging::Proto::EFromServer value) {

  _impl_.what_ = value;
}
inline void GenericFromServer::set_what(::Jde::Logging::Proto::EFromServer value) {
  _internal_set_what(value);
  // @@protoc_insertion_point(field_set:Jde.Logging.Proto.GenericFromServer.What)
}

// string Description = 2;
inline void GenericFromServer::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& GenericFromServer::description() const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.GenericFromServer.Description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenericFromServer::set_description(ArgT0&& arg0, ArgT... args) {

 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Logging.Proto.GenericFromServer.Description)
}
inline std::string* GenericFromServer::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:Jde.Logging.Proto.GenericFromServer.Description)
  return _s;
}
inline const std::string& GenericFromServer::_internal_description() const {
  return _impl_.description_.Get();
}
inline void GenericFromServer::_internal_set_description(const std::string& value) {

  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* GenericFromServer::_internal_mutable_description() {

  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* GenericFromServer::release_description() {
  // @@protoc_insertion_point(field_release:Jde.Logging.Proto.GenericFromServer.Description)
  return _impl_.description_.Release();
}
inline void GenericFromServer::set_allocated_description(std::string* description) {
  if (description != nullptr) {

  } else {

  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Jde.Logging.Proto.GenericFromServer.Description)
}

// -------------------------------------------------------------------

// Strings

// repeated uint32 Messages = 1;
inline int Strings::_internal_messages_size() const {
  return _impl_.messages_.size();
}
inline int Strings::messages_size() const {
  return _internal_messages_size();
}
inline void Strings::clear_messages() {
  _impl_.messages_.Clear();
}
inline uint32_t Strings::_internal_messages(int index) const {
  return _impl_.messages_.Get(index);
}
inline uint32_t Strings::messages(int index) const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.Strings.Messages)
  return _internal_messages(index);
}
inline void Strings::set_messages(int index, uint32_t value) {
  _impl_.messages_.Set(index, value);
  // @@protoc_insertion_point(field_set:Jde.Logging.Proto.Strings.Messages)
}
inline void Strings::_internal_add_messages(uint32_t value) {
  _impl_.messages_.Add(value);
}
inline void Strings::add_messages(uint32_t value) {
  _internal_add_messages(value);
  // @@protoc_insertion_point(field_add:Jde.Logging.Proto.Strings.Messages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Strings::_internal_messages() const {
  return _impl_.messages_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Strings::messages() const {
  // @@protoc_insertion_point(field_list:Jde.Logging.Proto.Strings.Messages)
  return _internal_messages();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Strings::_internal_mutable_messages() {
  return &_impl_.messages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Strings::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:Jde.Logging.Proto.Strings.Messages)
  return _internal_mutable_messages();
}

// repeated uint32 Files = 2;
inline int Strings::_internal_files_size() const {
  return _impl_.files_.size();
}
inline int Strings::files_size() const {
  return _internal_files_size();
}
inline void Strings::clear_files() {
  _impl_.files_.Clear();
}
inline uint32_t Strings::_internal_files(int index) const {
  return _impl_.files_.Get(index);
}
inline uint32_t Strings::files(int index) const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.Strings.Files)
  return _internal_files(index);
}
inline void Strings::set_files(int index, uint32_t value) {
  _impl_.files_.Set(index, value);
  // @@protoc_insertion_point(field_set:Jde.Logging.Proto.Strings.Files)
}
inline void Strings::_internal_add_files(uint32_t value) {
  _impl_.files_.Add(value);
}
inline void Strings::add_files(uint32_t value) {
  _internal_add_files(value);
  // @@protoc_insertion_point(field_add:Jde.Logging.Proto.Strings.Files)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Strings::_internal_files() const {
  return _impl_.files_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Strings::files() const {
  // @@protoc_insertion_point(field_list:Jde.Logging.Proto.Strings.Files)
  return _internal_files();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Strings::_internal_mutable_files() {
  return &_impl_.files_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Strings::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:Jde.Logging.Proto.Strings.Files)
  return _internal_mutable_files();
}

// repeated uint32 Functions = 3;
inline int Strings::_internal_functions_size() const {
  return _impl_.functions_.size();
}
inline int Strings::functions_size() const {
  return _internal_functions_size();
}
inline void Strings::clear_functions() {
  _impl_.functions_.Clear();
}
inline uint32_t Strings::_internal_functions(int index) const {
  return _impl_.functions_.Get(index);
}
inline uint32_t Strings::functions(int index) const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.Strings.Functions)
  return _internal_functions(index);
}
inline void Strings::set_functions(int index, uint32_t value) {
  _impl_.functions_.Set(index, value);
  // @@protoc_insertion_point(field_set:Jde.Logging.Proto.Strings.Functions)
}
inline void Strings::_internal_add_functions(uint32_t value) {
  _impl_.functions_.Add(value);
}
inline void Strings::add_functions(uint32_t value) {
  _internal_add_functions(value);
  // @@protoc_insertion_point(field_add:Jde.Logging.Proto.Strings.Functions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Strings::_internal_functions() const {
  return _impl_.functions_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Strings::functions() const {
  // @@protoc_insertion_point(field_list:Jde.Logging.Proto.Strings.Functions)
  return _internal_functions();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Strings::_internal_mutable_functions() {
  return &_impl_.functions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Strings::mutable_functions() {
  // @@protoc_insertion_point(field_mutable_list:Jde.Logging.Proto.Strings.Functions)
  return _internal_mutable_functions();
}

// repeated uint32 Threads = 4;
inline int Strings::_internal_threads_size() const {
  return _impl_.threads_.size();
}
inline int Strings::threads_size() const {
  return _internal_threads_size();
}
inline void Strings::clear_threads() {
  _impl_.threads_.Clear();
}
inline uint32_t Strings::_internal_threads(int index) const {
  return _impl_.threads_.Get(index);
}
inline uint32_t Strings::threads(int index) const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.Strings.Threads)
  return _internal_threads(index);
}
inline void Strings::set_threads(int index, uint32_t value) {
  _impl_.threads_.Set(index, value);
  // @@protoc_insertion_point(field_set:Jde.Logging.Proto.Strings.Threads)
}
inline void Strings::_internal_add_threads(uint32_t value) {
  _impl_.threads_.Add(value);
}
inline void Strings::add_threads(uint32_t value) {
  _internal_add_threads(value);
  // @@protoc_insertion_point(field_add:Jde.Logging.Proto.Strings.Threads)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Strings::_internal_threads() const {
  return _impl_.threads_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Strings::threads() const {
  // @@protoc_insertion_point(field_list:Jde.Logging.Proto.Strings.Threads)
  return _internal_threads();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Strings::_internal_mutable_threads() {
  return &_impl_.threads_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Strings::mutable_threads() {
  // @@protoc_insertion_point(field_mutable_list:Jde.Logging.Proto.Strings.Threads)
  return _internal_mutable_threads();
}

// -------------------------------------------------------------------

// Progress

// uint32 RequestId = 1;
inline void Progress::clear_requestid() {
  _impl_.requestid_ = 0u;
}
inline uint32_t Progress::_internal_requestid() const {
  return _impl_.requestid_;
}
inline uint32_t Progress::requestid() const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.Progress.RequestId)
  return _internal_requestid();
}
inline void Progress::_internal_set_requestid(uint32_t value) {

  _impl_.requestid_ = value;
}
inline void Progress::set_requestid(uint32_t value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:Jde.Logging.Proto.Progress.RequestId)
}

// double Value = 2;
inline void Progress::clear_value() {
  _impl_.value_ = 0;
}
inline double Progress::_internal_value() const {
  return _impl_.value_;
}
inline double Progress::value() const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.Progress.Value)
  return _internal_value();
}
inline void Progress::_internal_set_value(double value) {

  _impl_.value_ = value;
}
inline void Progress::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Jde.Logging.Proto.Progress.Value)
}

// -------------------------------------------------------------------

// LogLevels

// .Jde.Logging.Proto.ELogLevel Server = 1;
inline void LogLevels::clear_server() {
  _impl_.server_ = 0;
}
inline ::Jde::Logging::Proto::ELogLevel LogLevels::_internal_server() const {
  return static_cast< ::Jde::Logging::Proto::ELogLevel >(_impl_.server_);
}
inline ::Jde::Logging::Proto::ELogLevel LogLevels::server() const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.LogLevels.Server)
  return _internal_server();
}
inline void LogLevels::_internal_set_server(::Jde::Logging::Proto::ELogLevel value) {

  _impl_.server_ = value;
}
inline void LogLevels::set_server(::Jde::Logging::Proto::ELogLevel value) {
  _internal_set_server(value);
  // @@protoc_insertion_point(field_set:Jde.Logging.Proto.LogLevels.Server)
}

// .Jde.Logging.Proto.ELogLevel Client = 2;
inline void LogLevels::clear_client() {
  _impl_.client_ = 0;
}
inline ::Jde::Logging::Proto::ELogLevel LogLevels::_internal_client() const {
  return static_cast< ::Jde::Logging::Proto::ELogLevel >(_impl_.client_);
}
inline ::Jde::Logging::Proto::ELogLevel LogLevels::client() const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.LogLevels.Client)
  return _internal_client();
}
inline void LogLevels::_internal_set_client(::Jde::Logging::Proto::ELogLevel value) {

  _impl_.client_ = value;
}
inline void LogLevels::set_client(::Jde::Logging::Proto::ELogLevel value) {
  _internal_set_client(value);
  // @@protoc_insertion_point(field_set:Jde.Logging.Proto.LogLevels.Client)
}

// -------------------------------------------------------------------

// FromServerUnion

// .Jde.Logging.Proto.Acknowledgement Acknowledgement = 1;
inline bool FromServerUnion::_internal_has_acknowledgement() const {
  return Value_case() == kAcknowledgement;
}
inline bool FromServerUnion::has_acknowledgement() const {
  return _internal_has_acknowledgement();
}
inline void FromServerUnion::set_has_acknowledgement() {
  _impl_._oneof_case_[0] = kAcknowledgement;
}
inline void FromServerUnion::clear_acknowledgement() {
  if (_internal_has_acknowledgement()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Value_.acknowledgement_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Logging::Proto::Acknowledgement* FromServerUnion::release_acknowledgement() {
  // @@protoc_insertion_point(field_release:Jde.Logging.Proto.FromServerUnion.Acknowledgement)
  if (_internal_has_acknowledgement()) {
    clear_has_Value();
    ::Jde::Logging::Proto::Acknowledgement* temp = _impl_.Value_.acknowledgement_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Value_.acknowledgement_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Logging::Proto::Acknowledgement& FromServerUnion::_internal_acknowledgement() const {
  return _internal_has_acknowledgement()
      ? *_impl_.Value_.acknowledgement_
      : reinterpret_cast< ::Jde::Logging::Proto::Acknowledgement&>(::Jde::Logging::Proto::_Acknowledgement_default_instance_);
}
inline const ::Jde::Logging::Proto::Acknowledgement& FromServerUnion::acknowledgement() const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.FromServerUnion.Acknowledgement)
  return _internal_acknowledgement();
}
inline ::Jde::Logging::Proto::Acknowledgement* FromServerUnion::unsafe_arena_release_acknowledgement() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Logging.Proto.FromServerUnion.Acknowledgement)
  if (_internal_has_acknowledgement()) {
    clear_has_Value();
    ::Jde::Logging::Proto::Acknowledgement* temp = _impl_.Value_.acknowledgement_;
    _impl_.Value_.acknowledgement_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FromServerUnion::unsafe_arena_set_allocated_acknowledgement(::Jde::Logging::Proto::Acknowledgement* acknowledgement) {
  clear_Value();
  if (acknowledgement) {
    set_has_acknowledgement();
    _impl_.Value_.acknowledgement_ = acknowledgement;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Logging.Proto.FromServerUnion.Acknowledgement)
}
inline ::Jde::Logging::Proto::Acknowledgement* FromServerUnion::_internal_mutable_acknowledgement() {
  if (!_internal_has_acknowledgement()) {
    clear_Value();
    set_has_acknowledgement();
    _impl_.Value_.acknowledgement_ = CreateMaybeMessage< ::Jde::Logging::Proto::Acknowledgement >(GetArenaForAllocation());
  }
  return _impl_.Value_.acknowledgement_;
}
inline ::Jde::Logging::Proto::Acknowledgement* FromServerUnion::mutable_acknowledgement() {
  ::Jde::Logging::Proto::Acknowledgement* _msg = _internal_mutable_acknowledgement();
  // @@protoc_insertion_point(field_mutable:Jde.Logging.Proto.FromServerUnion.Acknowledgement)
  return _msg;
}

// .Jde.Logging.Proto.GenericFromServer Generic = 2;
inline bool FromServerUnion::_internal_has_generic() const {
  return Value_case() == kGeneric;
}
inline bool FromServerUnion::has_generic() const {
  return _internal_has_generic();
}
inline void FromServerUnion::set_has_generic() {
  _impl_._oneof_case_[0] = kGeneric;
}
inline void FromServerUnion::clear_generic() {
  if (_internal_has_generic()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Value_.generic_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Logging::Proto::GenericFromServer* FromServerUnion::release_generic() {
  // @@protoc_insertion_point(field_release:Jde.Logging.Proto.FromServerUnion.Generic)
  if (_internal_has_generic()) {
    clear_has_Value();
    ::Jde::Logging::Proto::GenericFromServer* temp = _impl_.Value_.generic_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Value_.generic_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Logging::Proto::GenericFromServer& FromServerUnion::_internal_generic() const {
  return _internal_has_generic()
      ? *_impl_.Value_.generic_
      : reinterpret_cast< ::Jde::Logging::Proto::GenericFromServer&>(::Jde::Logging::Proto::_GenericFromServer_default_instance_);
}
inline const ::Jde::Logging::Proto::GenericFromServer& FromServerUnion::generic() const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.FromServerUnion.Generic)
  return _internal_generic();
}
inline ::Jde::Logging::Proto::GenericFromServer* FromServerUnion::unsafe_arena_release_generic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Logging.Proto.FromServerUnion.Generic)
  if (_internal_has_generic()) {
    clear_has_Value();
    ::Jde::Logging::Proto::GenericFromServer* temp = _impl_.Value_.generic_;
    _impl_.Value_.generic_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FromServerUnion::unsafe_arena_set_allocated_generic(::Jde::Logging::Proto::GenericFromServer* generic) {
  clear_Value();
  if (generic) {
    set_has_generic();
    _impl_.Value_.generic_ = generic;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Logging.Proto.FromServerUnion.Generic)
}
inline ::Jde::Logging::Proto::GenericFromServer* FromServerUnion::_internal_mutable_generic() {
  if (!_internal_has_generic()) {
    clear_Value();
    set_has_generic();
    _impl_.Value_.generic_ = CreateMaybeMessage< ::Jde::Logging::Proto::GenericFromServer >(GetArenaForAllocation());
  }
  return _impl_.Value_.generic_;
}
inline ::Jde::Logging::Proto::GenericFromServer* FromServerUnion::mutable_generic() {
  ::Jde::Logging::Proto::GenericFromServer* _msg = _internal_mutable_generic();
  // @@protoc_insertion_point(field_mutable:Jde.Logging.Proto.FromServerUnion.Generic)
  return _msg;
}

// .Jde.Logging.Proto.Strings Strings = 3;
inline bool FromServerUnion::_internal_has_strings() const {
  return Value_case() == kStrings;
}
inline bool FromServerUnion::has_strings() const {
  return _internal_has_strings();
}
inline void FromServerUnion::set_has_strings() {
  _impl_._oneof_case_[0] = kStrings;
}
inline void FromServerUnion::clear_strings() {
  if (_internal_has_strings()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Value_.strings_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Logging::Proto::Strings* FromServerUnion::release_strings() {
  // @@protoc_insertion_point(field_release:Jde.Logging.Proto.FromServerUnion.Strings)
  if (_internal_has_strings()) {
    clear_has_Value();
    ::Jde::Logging::Proto::Strings* temp = _impl_.Value_.strings_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Value_.strings_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Logging::Proto::Strings& FromServerUnion::_internal_strings() const {
  return _internal_has_strings()
      ? *_impl_.Value_.strings_
      : reinterpret_cast< ::Jde::Logging::Proto::Strings&>(::Jde::Logging::Proto::_Strings_default_instance_);
}
inline const ::Jde::Logging::Proto::Strings& FromServerUnion::strings() const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.FromServerUnion.Strings)
  return _internal_strings();
}
inline ::Jde::Logging::Proto::Strings* FromServerUnion::unsafe_arena_release_strings() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Logging.Proto.FromServerUnion.Strings)
  if (_internal_has_strings()) {
    clear_has_Value();
    ::Jde::Logging::Proto::Strings* temp = _impl_.Value_.strings_;
    _impl_.Value_.strings_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FromServerUnion::unsafe_arena_set_allocated_strings(::Jde::Logging::Proto::Strings* strings) {
  clear_Value();
  if (strings) {
    set_has_strings();
    _impl_.Value_.strings_ = strings;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Logging.Proto.FromServerUnion.Strings)
}
inline ::Jde::Logging::Proto::Strings* FromServerUnion::_internal_mutable_strings() {
  if (!_internal_has_strings()) {
    clear_Value();
    set_has_strings();
    _impl_.Value_.strings_ = CreateMaybeMessage< ::Jde::Logging::Proto::Strings >(GetArenaForAllocation());
  }
  return _impl_.Value_.strings_;
}
inline ::Jde::Logging::Proto::Strings* FromServerUnion::mutable_strings() {
  ::Jde::Logging::Proto::Strings* _msg = _internal_mutable_strings();
  // @@protoc_insertion_point(field_mutable:Jde.Logging.Proto.FromServerUnion.Strings)
  return _msg;
}

// .Jde.Logging.Proto.LogLevels LogLevels = 4;
inline bool FromServerUnion::_internal_has_loglevels() const {
  return Value_case() == kLogLevels;
}
inline bool FromServerUnion::has_loglevels() const {
  return _internal_has_loglevels();
}
inline void FromServerUnion::set_has_loglevels() {
  _impl_._oneof_case_[0] = kLogLevels;
}
inline void FromServerUnion::clear_loglevels() {
  if (_internal_has_loglevels()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Value_.loglevels_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Logging::Proto::LogLevels* FromServerUnion::release_loglevels() {
  // @@protoc_insertion_point(field_release:Jde.Logging.Proto.FromServerUnion.LogLevels)
  if (_internal_has_loglevels()) {
    clear_has_Value();
    ::Jde::Logging::Proto::LogLevels* temp = _impl_.Value_.loglevels_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Value_.loglevels_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Logging::Proto::LogLevels& FromServerUnion::_internal_loglevels() const {
  return _internal_has_loglevels()
      ? *_impl_.Value_.loglevels_
      : reinterpret_cast< ::Jde::Logging::Proto::LogLevels&>(::Jde::Logging::Proto::_LogLevels_default_instance_);
}
inline const ::Jde::Logging::Proto::LogLevels& FromServerUnion::loglevels() const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.FromServerUnion.LogLevels)
  return _internal_loglevels();
}
inline ::Jde::Logging::Proto::LogLevels* FromServerUnion::unsafe_arena_release_loglevels() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Logging.Proto.FromServerUnion.LogLevels)
  if (_internal_has_loglevels()) {
    clear_has_Value();
    ::Jde::Logging::Proto::LogLevels* temp = _impl_.Value_.loglevels_;
    _impl_.Value_.loglevels_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FromServerUnion::unsafe_arena_set_allocated_loglevels(::Jde::Logging::Proto::LogLevels* loglevels) {
  clear_Value();
  if (loglevels) {
    set_has_loglevels();
    _impl_.Value_.loglevels_ = loglevels;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Logging.Proto.FromServerUnion.LogLevels)
}
inline ::Jde::Logging::Proto::LogLevels* FromServerUnion::_internal_mutable_loglevels() {
  if (!_internal_has_loglevels()) {
    clear_Value();
    set_has_loglevels();
    _impl_.Value_.loglevels_ = CreateMaybeMessage< ::Jde::Logging::Proto::LogLevels >(GetArenaForAllocation());
  }
  return _impl_.Value_.loglevels_;
}
inline ::Jde::Logging::Proto::LogLevels* FromServerUnion::mutable_loglevels() {
  ::Jde::Logging::Proto::LogLevels* _msg = _internal_mutable_loglevels();
  // @@protoc_insertion_point(field_mutable:Jde.Logging.Proto.FromServerUnion.LogLevels)
  return _msg;
}

// .Jde.Logging.Proto.CustomMessage Custom = 5;
inline bool FromServerUnion::_internal_has_custom() const {
  return Value_case() == kCustom;
}
inline bool FromServerUnion::has_custom() const {
  return _internal_has_custom();
}
inline void FromServerUnion::set_has_custom() {
  _impl_._oneof_case_[0] = kCustom;
}
inline void FromServerUnion::clear_custom() {
  if (_internal_has_custom()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Value_.custom_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Logging::Proto::CustomMessage* FromServerUnion::release_custom() {
  // @@protoc_insertion_point(field_release:Jde.Logging.Proto.FromServerUnion.Custom)
  if (_internal_has_custom()) {
    clear_has_Value();
    ::Jde::Logging::Proto::CustomMessage* temp = _impl_.Value_.custom_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Value_.custom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Logging::Proto::CustomMessage& FromServerUnion::_internal_custom() const {
  return _internal_has_custom()
      ? *_impl_.Value_.custom_
      : reinterpret_cast< ::Jde::Logging::Proto::CustomMessage&>(::Jde::Logging::Proto::_CustomMessage_default_instance_);
}
inline const ::Jde::Logging::Proto::CustomMessage& FromServerUnion::custom() const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.FromServerUnion.Custom)
  return _internal_custom();
}
inline ::Jde::Logging::Proto::CustomMessage* FromServerUnion::unsafe_arena_release_custom() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Logging.Proto.FromServerUnion.Custom)
  if (_internal_has_custom()) {
    clear_has_Value();
    ::Jde::Logging::Proto::CustomMessage* temp = _impl_.Value_.custom_;
    _impl_.Value_.custom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FromServerUnion::unsafe_arena_set_allocated_custom(::Jde::Logging::Proto::CustomMessage* custom) {
  clear_Value();
  if (custom) {
    set_has_custom();
    _impl_.Value_.custom_ = custom;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Logging.Proto.FromServerUnion.Custom)
}
inline ::Jde::Logging::Proto::CustomMessage* FromServerUnion::_internal_mutable_custom() {
  if (!_internal_has_custom()) {
    clear_Value();
    set_has_custom();
    _impl_.Value_.custom_ = CreateMaybeMessage< ::Jde::Logging::Proto::CustomMessage >(GetArenaForAllocation());
  }
  return _impl_.Value_.custom_;
}
inline ::Jde::Logging::Proto::CustomMessage* FromServerUnion::mutable_custom() {
  ::Jde::Logging::Proto::CustomMessage* _msg = _internal_mutable_custom();
  // @@protoc_insertion_point(field_mutable:Jde.Logging.Proto.FromServerUnion.Custom)
  return _msg;
}

// .Jde.Logging.Proto.Progress Progress = 6;
inline bool FromServerUnion::_internal_has_progress() const {
  return Value_case() == kProgress;
}
inline bool FromServerUnion::has_progress() const {
  return _internal_has_progress();
}
inline void FromServerUnion::set_has_progress() {
  _impl_._oneof_case_[0] = kProgress;
}
inline void FromServerUnion::clear_progress() {
  if (_internal_has_progress()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Value_.progress_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Logging::Proto::Progress* FromServerUnion::release_progress() {
  // @@protoc_insertion_point(field_release:Jde.Logging.Proto.FromServerUnion.Progress)
  if (_internal_has_progress()) {
    clear_has_Value();
    ::Jde::Logging::Proto::Progress* temp = _impl_.Value_.progress_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Value_.progress_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Logging::Proto::Progress& FromServerUnion::_internal_progress() const {
  return _internal_has_progress()
      ? *_impl_.Value_.progress_
      : reinterpret_cast< ::Jde::Logging::Proto::Progress&>(::Jde::Logging::Proto::_Progress_default_instance_);
}
inline const ::Jde::Logging::Proto::Progress& FromServerUnion::progress() const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.FromServerUnion.Progress)
  return _internal_progress();
}
inline ::Jde::Logging::Proto::Progress* FromServerUnion::unsafe_arena_release_progress() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Logging.Proto.FromServerUnion.Progress)
  if (_internal_has_progress()) {
    clear_has_Value();
    ::Jde::Logging::Proto::Progress* temp = _impl_.Value_.progress_;
    _impl_.Value_.progress_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FromServerUnion::unsafe_arena_set_allocated_progress(::Jde::Logging::Proto::Progress* progress) {
  clear_Value();
  if (progress) {
    set_has_progress();
    _impl_.Value_.progress_ = progress;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Logging.Proto.FromServerUnion.Progress)
}
inline ::Jde::Logging::Proto::Progress* FromServerUnion::_internal_mutable_progress() {
  if (!_internal_has_progress()) {
    clear_Value();
    set_has_progress();
    _impl_.Value_.progress_ = CreateMaybeMessage< ::Jde::Logging::Proto::Progress >(GetArenaForAllocation());
  }
  return _impl_.Value_.progress_;
}
inline ::Jde::Logging::Proto::Progress* FromServerUnion::mutable_progress() {
  ::Jde::Logging::Proto::Progress* _msg = _internal_mutable_progress();
  // @@protoc_insertion_point(field_mutable:Jde.Logging.Proto.FromServerUnion.Progress)
  return _msg;
}

// .Jde.Logging.Proto.SessionInfo session_info = 7;
inline bool FromServerUnion::_internal_has_session_info() const {
  return Value_case() == kSessionInfo;
}
inline bool FromServerUnion::has_session_info() const {
  return _internal_has_session_info();
}
inline void FromServerUnion::set_has_session_info() {
  _impl_._oneof_case_[0] = kSessionInfo;
}
inline void FromServerUnion::clear_session_info() {
  if (_internal_has_session_info()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Value_.session_info_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Logging::Proto::SessionInfo* FromServerUnion::release_session_info() {
  // @@protoc_insertion_point(field_release:Jde.Logging.Proto.FromServerUnion.session_info)
  if (_internal_has_session_info()) {
    clear_has_Value();
    ::Jde::Logging::Proto::SessionInfo* temp = _impl_.Value_.session_info_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Value_.session_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Logging::Proto::SessionInfo& FromServerUnion::_internal_session_info() const {
  return _internal_has_session_info()
      ? *_impl_.Value_.session_info_
      : reinterpret_cast< ::Jde::Logging::Proto::SessionInfo&>(::Jde::Logging::Proto::_SessionInfo_default_instance_);
}
inline const ::Jde::Logging::Proto::SessionInfo& FromServerUnion::session_info() const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.FromServerUnion.session_info)
  return _internal_session_info();
}
inline ::Jde::Logging::Proto::SessionInfo* FromServerUnion::unsafe_arena_release_session_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Logging.Proto.FromServerUnion.session_info)
  if (_internal_has_session_info()) {
    clear_has_Value();
    ::Jde::Logging::Proto::SessionInfo* temp = _impl_.Value_.session_info_;
    _impl_.Value_.session_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FromServerUnion::unsafe_arena_set_allocated_session_info(::Jde::Logging::Proto::SessionInfo* session_info) {
  clear_Value();
  if (session_info) {
    set_has_session_info();
    _impl_.Value_.session_info_ = session_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Logging.Proto.FromServerUnion.session_info)
}
inline ::Jde::Logging::Proto::SessionInfo* FromServerUnion::_internal_mutable_session_info() {
  if (!_internal_has_session_info()) {
    clear_Value();
    set_has_session_info();
    _impl_.Value_.session_info_ = CreateMaybeMessage< ::Jde::Logging::Proto::SessionInfo >(GetArenaForAllocation());
  }
  return _impl_.Value_.session_info_;
}
inline ::Jde::Logging::Proto::SessionInfo* FromServerUnion::mutable_session_info() {
  ::Jde::Logging::Proto::SessionInfo* _msg = _internal_mutable_session_info();
  // @@protoc_insertion_point(field_mutable:Jde.Logging.Proto.FromServerUnion.session_info)
  return _msg;
}

inline bool FromServerUnion::has_Value() const {
  return Value_case() != VALUE_NOT_SET;
}
inline void FromServerUnion::clear_has_Value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline FromServerUnion::ValueCase FromServerUnion::Value_case() const {
  return FromServerUnion::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// FromServer

// repeated .Jde.Logging.Proto.FromServerUnion Messages = 1;
inline int FromServer::_internal_messages_size() const {
  return _impl_.messages_.size();
}
inline int FromServer::messages_size() const {
  return _internal_messages_size();
}
inline void FromServer::clear_messages() {
  _impl_.messages_.Clear();
}
inline ::Jde::Logging::Proto::FromServerUnion* FromServer::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:Jde.Logging.Proto.FromServer.Messages)
  return _impl_.messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Logging::Proto::FromServerUnion >*
FromServer::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:Jde.Logging.Proto.FromServer.Messages)
  return &_impl_.messages_;
}
inline const ::Jde::Logging::Proto::FromServerUnion& FromServer::_internal_messages(int index) const {
  return _impl_.messages_.Get(index);
}
inline const ::Jde::Logging::Proto::FromServerUnion& FromServer::messages(int index) const {
  // @@protoc_insertion_point(field_get:Jde.Logging.Proto.FromServer.Messages)
  return _internal_messages(index);
}
inline ::Jde::Logging::Proto::FromServerUnion* FromServer::_internal_add_messages() {
  return _impl_.messages_.Add();
}
inline ::Jde::Logging::Proto::FromServerUnion* FromServer::add_messages() {
  ::Jde::Logging::Proto::FromServerUnion* _add = _internal_add_messages();
  // @@protoc_insertion_point(field_add:Jde.Logging.Proto.FromServer.Messages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Logging::Proto::FromServerUnion >&
FromServer::messages() const {
  // @@protoc_insertion_point(field_list:Jde.Logging.Proto.FromServer.Messages)
  return _impl_.messages_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Logging
}  // namespace Jde

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Jde::Logging::Proto::ELogLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Jde::Logging::Proto::ELogLevel>() {
  return ::Jde::Logging::Proto::ELogLevel_descriptor();
}
template <> struct is_proto_enum< ::Jde::Logging::Proto::EFields> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Jde::Logging::Proto::EFields>() {
  return ::Jde::Logging::Proto::EFields_descriptor();
}
template <> struct is_proto_enum< ::Jde::Logging::Proto::EFromServer> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Jde::Logging::Proto::EFromServer>() {
  return ::Jde::Logging::Proto::EFromServer_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
