#https://stackoverflow.com/questions/31546278/where-to-set-cmake-configuration-types-in-a-project-with-subprojects
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
if(NOT SET_UP_CONFIGURATIONS_DONE)
	set(SET_UP_CONFIGURATIONS_DONE 1)
	if(CMAKE_CONFIGURATION_TYPES) # multiconfig generator?
		set(CMAKE_CONFIGURATION_TYPES "Debug;ASAN;Release;RelWithDebInfo" CACHE STRING "" FORCE) 
	else()
		if(NOT CMAKE_BUILD_TYPE)
			message( "Defaulting to ASAN build." )
			set( CMAKE_BUILD_TYPE ASAN CACHE STRING "" FORCE )
		endif()
		set_property( CACHE CMAKE_BUILD_TYPE PROPERTY HELPSTRING "Choose the type of build" )
		# set the valid options for cmake-gui drop-down list
		set_property( CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Asan;Debug;Release;Profile" )
	endif()
endif()
#######################################################
string(APPEND RELEASE " -O3 -march=native -DNDEBUG")
string(APPEND DEBUG " -O0 -g")
if(MSVC)
	string(APPEND DEBUG " /W4 /WX")
else()
	string(APPEND DEBUG " -Wall -Wno-unknown-pragmas")
endif()
string(APPEND CMAKE_CXX_FLAGS_RELEASE ${RELEASE} )
string(APPEND CMAKE_CXX_FLAGS_RELWITHDEBINFO ${RELEASE} )
string(APPEND CMAKE_CXX_FLAGS_RELWITHDEBINFO "-g" )
string(APPEND CMAKE_CXX_FLAGS_DEBUG ${DEBUG})
#string(APPEND CMAKE_CXX_FLAGS_ASAN )
string(APPEND CMAKE_CXX_FLAGS_ASAN "${DEBUG} -fsanitize=address -fno-omit-frame-pointer")

find_program(CCACHE_FOUND ccache)
if(CCACHE_FOUND)
	set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)
endif(CCACHE_FOUND)

set(THREADS_PREFER_PTHREAD_FLAG ON)
find_package(Threads REQUIRED)

set(Boost_USE_STATIC_LIBS OFF) 
set(Boost_USE_MULTITHREADED ON)  
set(Boost_USE_STATIC_RUNTIME OFF) 
find_package(Boost 1.71.0 COMPONENTS)
if(Boost_FOUND)
    include_directories(${Boost_INCLUDE_DIRS})
endif()
#######################################################
include_directories( "/home/duffyj/code/libraries/spdlog/include" )
include_directories( "/home/duffyj/code/libraries/json/include" )
string(TOLOWER ${CMAKE_BUILD_TYPE} outDir)
set( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/../../bin/${outDir} )
set( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/../../bin/${outDir} )
add_link_options( "LINKER:-z,origin-shared" )
set(CMAKE_SHARED_LINKER_FLAGS ${CMAKE_SHARED_LINKER_FLAGS} "-Wl,-rpath=$ORIGIN")

